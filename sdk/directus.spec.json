{
  "openapi": "3.0.1",
  "info": {
    "title": "Dynamic API Specification",
    "description": "This is a dynamically generated API specification for all endpoints existing on the current project.",
    "version": "9.0.0-rc.76"
  },
  "servers": [
    {
      "url": "/",
      "description": "Your current Directus instance."
    }
  ],
  "tags": [
    {
      "name": "Assets",
      "description": "Image typed files can be dynamically resized and transformed to fit any need."
    },
    {
      "name": "Authentication",
      "description": "All events that happen within Directus are tracked and stored in the activities collection. This gives you full accountability over everything that happens."
    },
    {
      "name": "Extensions",
      "description": "Directus can easily be extended through the addition of several types of extensions, including layouts, interfaces, and modules."
    },
    {
      "name": "Server",
      "description": "Access to where Directus runs. Allows you to make sure your server has everything needed to run the platform, and check what kind of latency we're dealing with."
    },
    {
      "name": "Utilities",
      "description": "Directus comes with various utility endpoints you can use to simplify your development flow."
    },
    {
      "name": "ItemsAccommodation",
      "x-collection": "accommodation"
    },
    {
      "name": "ItemsAccommodationResearchEvidence",
      "x-collection": "accommodation_research_evidence"
    },
    {
      "name": "ItemsAlias",
      "x-collection": "alias"
    },
    {
      "name": "ItemsAssessmentReference",
      "x-collection": "assessment_reference"
    },
    {
      "name": "ItemsAssessmentReferenceAuthor",
      "x-collection": "assessment_reference_author"
    },
    {
      "name": "ItemsAuthor",
      "x-collection": "author"
    },
    {
      "name": "ItemsBehaviourAccommodation",
      "x-collection": "behaviour_accommodation"
    },
    {
      "name": "ItemsBehaviourGuide",
      "x-collection": "behaviour_guide"
    },
    {
      "name": "ItemsBehaviourIntervention",
      "x-collection": "behaviour_intervention"
    },
    {
      "name": "ItemsBehaviourQuestionnaire",
      "x-collection": "behaviour_questionnaire"
    },
    {
      "name": "ItemsBehaviourTechnology",
      "x-collection": "behaviour_technology"
    },
    {
      "name": "Activity",
      "description": "All events that happen within Directus are tracked and stored in the activities collection. This gives you full accountability over everything that happens.",
      "x-collection": "directus_activity"
    },
    {
      "name": "Collections",
      "description": "Collections are the individual collections of items, similar to tables in a database. Changes to collections will alter the schema of the database.",
      "x-collection": "directus_collections"
    },
    {
      "name": "Fields",
      "description": "Fields are individual pieces of content within an item. They are mapped to columns in the database.",
      "x-collection": "directus_fields"
    },
    {
      "name": "Files",
      "description": "Files can be saved in any given location. Directus has a powerful assets endpoint that can be used to generate thumbnails for images on the fly.",
      "x-collection": "directus_files"
    },
    {
      "name": "Folders",
      "description": "Group files by virtual folders.",
      "x-collection": "directus_folders"
    },
    {
      "name": "Permissions",
      "description": "Permissions control who has access to what and when.",
      "x-collection": "directus_permissions"
    },
    {
      "name": "Presets",
      "description": "Presets hold the preferences of individual users of the platform. This allows Directus to show and maintain custom item listings for users of the app.",
      "x-collection": "directus_presets"
    },
    {
      "name": "Relations",
      "description": "What data is linked to what other data. Allows you to assign authors to articles, products to sales, and whatever other structures you can think of.",
      "x-collection": "directus_relations"
    },
    {
      "name": "Roles",
      "description": "Roles are groups of users that share permissions.",
      "x-collection": "directus_roles"
    },
    {
      "name": "Settings",
      "description": "Settings control the way the platform works and acts.",
      "x-collection": "directus_settings"
    },
    {
      "name": "Users",
      "description": "Users are what gives you access to the data.",
      "x-collection": "directus_users"
    },
    {
      "name": "ItemsDisorder",
      "x-collection": "disorder"
    },
    {
      "name": "ItemsDisorderAccommodation",
      "x-collection": "disorder_accommodation"
    },
    {
      "name": "ItemsDisorderCategory",
      "x-collection": "disorder_category"
    },
    {
      "name": "ItemsDisorderCategoryAccommodation",
      "x-collection": "disorder_category_accommodation"
    },
    {
      "name": "ItemsDisorderCategoryIntervention",
      "x-collection": "disorder_category_intervention"
    },
    {
      "name": "ItemsDisorderCategoryTechnology",
      "x-collection": "disorder_category_technology"
    },
    {
      "name": "ItemsDisorderIntervention",
      "x-collection": "disorder_intervention"
    },
    {
      "name": "ItemsDisorderReference",
      "x-collection": "disorder_reference"
    },
    {
      "name": "ItemsDisorderReferenceAuthor",
      "x-collection": "disorder_reference_author"
    },
    {
      "name": "ItemsDisorderSignSymptom",
      "x-collection": "disorder_sign_symptom"
    },
    {
      "name": "ItemsDisorderSubcategory",
      "x-collection": "disorder_subcategory"
    },
    {
      "name": "ItemsDisorderTechnology",
      "x-collection": "disorder_technology"
    },
    {
      "name": "ItemsGuide",
      "x-collection": "guide"
    },
    {
      "name": "ItemsGuideAccommodation",
      "x-collection": "guide_accommodation"
    },
    {
      "name": "ItemsGuideAudience",
      "x-collection": "guide_audience"
    },
    {
      "name": "ItemsGuideAuthor",
      "x-collection": "guide_author"
    },
    {
      "name": "ItemsGuideDisorder",
      "x-collection": "guide_disorder"
    },
    {
      "name": "ItemsGuideDisorderCategory",
      "x-collection": "guide_disorder_category"
    },
    {
      "name": "ItemsGuideGuideType",
      "x-collection": "guide_guide_type"
    },
    {
      "name": "ItemsGuideIntervention",
      "x-collection": "guide_intervention"
    },
    {
      "name": "ItemsGuideReference",
      "x-collection": "guide_reference"
    },
    {
      "name": "ItemsGuideTechnology",
      "x-collection": "guide_technology"
    },
    {
      "name": "ItemsGuideType",
      "x-collection": "guide_type"
    },
    {
      "name": "ItemsIntervention",
      "x-collection": "intervention"
    },
    {
      "name": "ItemsInterventionResearchEvidence",
      "x-collection": "intervention_research_evidence"
    },
    {
      "name": "ItemsLanguageSource",
      "x-collection": "language_source"
    },
    {
      "name": "ItemsLisaAuthor",
      "x-collection": "lisa_author"
    },
    {
      "name": "ItemsLisaDomain",
      "x-collection": "lisa_domain"
    },
    {
      "name": "ItemsLisaDomainCategory",
      "x-collection": "lisa_domain_category"
    },
    {
      "name": "ItemsLisaDomainCategoryLocale",
      "x-collection": "lisa_domain_category_locale"
    },
    {
      "name": "ItemsLisaDomainCategoryLocaleAuthor",
      "x-collection": "lisa_domain_category_locale_author"
    },
    {
      "name": "ItemsLisaDomainCategoryLocaleVersion",
      "x-collection": "lisa_domain_category_locale_version"
    },
    {
      "name": "ItemsLisaDomainGuide",
      "x-collection": "lisa_domain_guide"
    },
    {
      "name": "ItemsLisaDomainGuideLocale",
      "x-collection": "lisa_domain_guide_locale"
    },
    {
      "name": "ItemsLisaDomainLocale",
      "x-collection": "lisa_domain_locale"
    },
    {
      "name": "ItemsLisaDomainLocaleAuthor",
      "x-collection": "lisa_domain_locale_author"
    },
    {
      "name": "ItemsLisaDomainLocaleVersion",
      "x-collection": "lisa_domain_locale_version"
    },
    {
      "name": "ItemsLisaGuide",
      "x-collection": "lisa_guide"
    },
    {
      "name": "ItemsLisaGuideLocale",
      "x-collection": "lisa_guide_locale"
    },
    {
      "name": "ItemsLisaGuideLocaleAuthor",
      "x-collection": "lisa_guide_locale_author"
    },
    {
      "name": "ItemsLisaGuideLocaleVersion",
      "x-collection": "lisa_guide_locale_version"
    },
    {
      "name": "ItemsLisaStaticContent",
      "x-collection": "lisa_static_content"
    },
    {
      "name": "ItemsLisaStaticContentLocale",
      "x-collection": "lisa_static_content_locale"
    },
    {
      "name": "ItemsLisaStaticContentLocaleVersion",
      "x-collection": "lisa_static_content_locale_version"
    },
    {
      "name": "ItemsLocale",
      "x-collection": "locale"
    },
    {
      "name": "ItemsNeutralConstruct",
      "x-collection": "neutral_construct"
    },
    {
      "name": "ItemsQuestion",
      "x-collection": "question"
    },
    {
      "name": "ItemsQuestionResponseType",
      "x-collection": "question_response_type"
    },
    {
      "name": "ItemsQuestionnaire",
      "x-collection": "questionnaire"
    },
    {
      "name": "ItemsQuestionnaireAssessmentReference",
      "x-collection": "questionnaire_assessment_reference"
    },
    {
      "name": "ItemsQuestionnaireAuthor",
      "x-collection": "questionnaire_author"
    },
    {
      "name": "ItemsQuestionnaireDisorder",
      "x-collection": "questionnaire_disorder"
    },
    {
      "name": "ItemsQuestionnaireDisorderCategory",
      "x-collection": "questionnaire_disorder_category"
    },
    {
      "name": "ItemsQuestionnaireLanguageNotMhdb",
      "x-collection": "questionnaire_language_not_mhdb"
    },
    {
      "name": "ItemsQuestionnaireRespondent",
      "x-collection": "questionnaire_respondent"
    },
    {
      "name": "ItemsQuestionnaireSignSymptom",
      "x-collection": "questionnaire_sign_symptom"
    },
    {
      "name": "ItemsQuestionnaireSubject",
      "x-collection": "questionnaire_subject"
    },
    {
      "name": "ItemsResearchEvidence",
      "x-collection": "research_evidence"
    },
    {
      "name": "ItemsResourcePeopleAudience",
      "x-collection": "resource_people_audience"
    },
    {
      "name": "ItemsResponseType",
      "x-collection": "response_type"
    },
    {
      "name": "ItemsSignSymptom",
      "x-collection": "sign_symptom"
    },
    {
      "name": "ItemsSignSymptomAccommodation",
      "x-collection": "sign_symptom_accommodation"
    },
    {
      "name": "ItemsSignSymptomExample",
      "x-collection": "sign_symptom_example"
    },
    {
      "name": "ItemsSignSymptomIntervention",
      "x-collection": "sign_symptom_intervention"
    },
    {
      "name": "ItemsSignSymptomNeutralConstruct",
      "x-collection": "sign_symptom_neutral_construct"
    },
    {
      "name": "ItemsSignSymptomTechnology",
      "x-collection": "sign_symptom_technology"
    },
    {
      "name": "ItemsSignSymptomwithExample",
      "x-collection": "sign_symptom_with_example"
    },
    {
      "name": "ItemsStateDomainBehaviour",
      "x-collection": "state_domain_behaviour"
    },
    {
      "name": "ItemsTask",
      "x-collection": "task"
    },
    {
      "name": "ItemsTechnology",
      "x-collection": "technology"
    },
    {
      "name": "ItemsTechnologyResearchEvidence",
      "x-collection": "technology_research_evidence"
    }
  ],
  "paths": {
    "/assets/{id}": {
      "get": {
        "tags": [
          "Assets"
        ],
        "operationId": "getAsset",
        "summary": "Get an Asset",
        "description": "Image typed files can be dynamically resized and transformed to fit any need.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the file.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "in": "query",
            "description": "The key of the asset size configured in settings.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "width",
            "in": "query",
            "description": "Width of the file in pixels.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "height",
            "in": "query",
            "description": "Height of the file in pixels.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "fit",
            "in": "query",
            "description": "Fit of the file",
            "schema": {
              "type": "string",
              "enum": [
                "crop",
                "contain",
                "inside",
                "outside"
              ]
            }
          },
          {
            "name": "withoutEnlargement",
            "in": "query",
            "description": "No image upscale.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "quality",
            "in": "query",
            "description": "Quality of compression.",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100
            }
          },
          {
            "name": "download",
            "in": "query",
            "description": "Download the asset to your computer",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "summary": "Retrieve a Temporary Access Token",
        "description": "Retrieve a Temporary Access Token",
        "tags": [
          "Authentication"
        ],
        "operationId": "login",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "admin@example.com",
                    "description": "Email address of the user you're retrieving the access token for."
                  },
                  "password": {
                    "type": "string",
                    "description": "Password of the user.",
                    "format": "password",
                    "example": "password"
                  },
                  "mode": {
                    "type": "string",
                    "enum": [
                      "json",
                      "cookie"
                    ],
                    "default": "json",
                    "description": "Choose between retrieving the token as a string, or setting it as a cookie."
                  },
                  "otp": {
                    "type": "string",
                    "description": "If 2FA is enabled, you need to pass the one time password."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful authentification",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "access_token": {
                          "type": "string",
                          "example": "eyJhbGciOiJI..."
                        },
                        "expires": {
                          "type": "integer",
                          "example": 900
                        },
                        "refresh_token": {
                          "type": "string",
                          "example": "yuOJkjdPXMd..."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "summary": "Refresh Token",
        "description": "Refresh a Temporary Access Token.",
        "tags": [
          "Authentication"
        ],
        "operationId": "refresh",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "token"
                ],
                "properties": {
                  "refresh_token": {
                    "type": "string",
                    "example": "eyJ0eXAiOiJKV...",
                    "description": "JWT access token you want to refresh. This token can't be expired."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "access_token": {
                          "type": "string",
                          "example": "eyJhbGciOiJI..."
                        },
                        "expires": {
                          "type": "integer",
                          "example": 900
                        },
                        "refresh_token": {
                          "type": "string",
                          "example": "Gy-caJMpmGTA..."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "summary": "Log Out",
        "description": "Log Out",
        "tags": [
          "Authentication"
        ],
        "operationId": "logout",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "token"
                ],
                "properties": {
                  "refresh_token": {
                    "type": "string",
                    "example": "eyJ0eXAiOiJKV...",
                    "description": "JWT access token you want to logout."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request successful"
          }
        }
      }
    },
    "/auth/password/request": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "operationId": "passwordRequest",
        "summary": "Request a Password Reset",
        "description": "Request a reset password email to be send.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "admin@example.com",
                    "description": "Email address of the user you're requesting a reset for."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/auth/password/reset": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "operationId": "passwordReset",
        "summary": "Reset a Password",
        "description": "The request a password reset endpoint sends an email with a link to the admin app which in turn uses this endpoint to allow the user to reset their password.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "token",
                  "password"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "example": "eyJ0eXAiOiJKV1Qi...",
                    "description": "One-time use JWT token that is used to verify the user."
                  },
                  "password": {
                    "type": "string",
                    "example": "password",
                    "format": "password",
                    "description": "New password for the user."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/auth/oauth": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "operationId": "oauth",
        "summary": "List OAuth Providers",
        "description": "List configured OAuth providers.",
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "public": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "array",
                      "example": [
                        "github",
                        "facebook"
                      ],
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/auth/oauth/{provider}": {
      "get": {
        "summary": "Authenticated using an OAuth provider",
        "description": "Start OAuth flow using the specified provider",
        "tags": [
          "Authentication"
        ],
        "operationId": "oauthProvider",
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "description": "Key of the activated OAuth provider.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "redirect",
            "in": "query",
            "required": false,
            "description": "Where to redirect on successful login.<br/>If set the authentication details are set inside cookies otherwise a JSON is returned.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "public": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "token": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/extensions/interfaces": {
      "get": {
        "summary": "List Interfaces",
        "description": "List all installed custom interfaces.",
        "operationId": "getInterfaces",
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Extensions"
        ]
      }
    },
    "/extensions/layouts": {
      "get": {
        "summary": "List Layouts",
        "description": "List all installed custom layouts.",
        "operationId": "getLayouts",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  }
                }
              }
            },
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Extensions"
        ]
      }
    },
    "/extensions/displays": {
      "get": {
        "summary": "List Displays",
        "description": "List all installed custom displays.",
        "operationId": "getDisplays",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  }
                }
              }
            },
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Extensions"
        ]
      }
    },
    "/extensions/modules": {
      "get": {
        "summary": "List Modules",
        "description": "List all installed custom modules.",
        "operationId": "getModules",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  }
                }
              }
            },
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Extensions"
        ]
      }
    },
    "/server/info": {
      "get": {
        "summary": "System Info",
        "description": "Perform a system status check and return the options.",
        "operationId": "serverInfo",
        "parameters": [
          {
            "description": "The first time you create a project, the provided token will be saved and required for subsequent project installs. It can also be found and configured in `/config/__api.json` on your server.",
            "in": "query",
            "name": "super_admin_token",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Server"
        ]
      }
    },
    "/server/ping": {
      "get": {
        "summary": "Ping",
        "description": "Ping, pong. Ping.. pong.",
        "operationId": "ping",
        "responses": {
          "200": {
            "content": {
              "application/text": {
                "schema": {
                  "type": "string",
                  "pattern": "pong",
                  "example": "pong"
                }
              }
            },
            "description": "Successful request"
          }
        },
        "tags": [
          "Server"
        ]
      }
    },
    "/utils/random/string": {
      "get": {
        "summary": "Get a Random String",
        "description": "Returns a random string of given length.",
        "operationId": "random",
        "parameters": [
          {
            "description": "Length of the random string.",
            "in": "query",
            "name": "length",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "string",
                      "example": "1>M3+4oh.S"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successful request"
          }
        },
        "tags": [
          "Utilities"
        ]
      }
    },
    "/utils/sort/{collection}": {
      "post": {
        "summary": "Sort Items",
        "description": "Re-sort items in collection based on start and to value of item",
        "operationId": "sort",
        "parameters": [
          {
            "description": "Collection identifier",
            "in": "path",
            "name": "collection",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "item": {
                    "description": "Primary key of item to move",
                    "type": "number"
                  },
                  "to": {
                    "description": "Primary key of item where to move the current item to",
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request"
          }
        },
        "tags": [
          "Utilities"
        ]
      }
    },
    "/items/accommodation": {
      "get": {
        "summary": "List Items",
        "description": "List the accommodation items.",
        "tags": [
          "Items",
          "ItemsAccommodation"
        ],
        "operationId": "readItemsAccommodation",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsAccommodation"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/accommodation/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single accommodation item by unique identifier.",
        "tags": [
          "Items",
          "ItemsAccommodation"
        ],
        "operationId": "readSingleItemsAccommodation",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsAccommodation"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/accommodation_research_evidence": {
      "get": {
        "summary": "List Items",
        "description": "List the accommodation_research_evidence items.",
        "tags": [
          "Items",
          "ItemsAccommodationResearchEvidence"
        ],
        "operationId": "readItemsAccommodationResearchEvidence",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsAccommodationResearchEvidence"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/accommodation_research_evidence/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single accommodation_research_evidence item by unique identifier.",
        "tags": [
          "Items",
          "ItemsAccommodationResearchEvidence"
        ],
        "operationId": "readSingleItemsAccommodationResearchEvidence",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsAccommodationResearchEvidence"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/alias": {
      "get": {
        "summary": "List Items",
        "description": "List the alias items.",
        "tags": [
          "Items",
          "ItemsAlias"
        ],
        "operationId": "readItemsAlias",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsAlias"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/alias/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single alias item by unique identifier.",
        "tags": [
          "Items",
          "ItemsAlias"
        ],
        "operationId": "readSingleItemsAlias",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsAlias"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/assessment_reference": {
      "get": {
        "summary": "List Items",
        "description": "List the assessment_reference items.",
        "tags": [
          "Items",
          "ItemsAssessmentReference"
        ],
        "operationId": "readItemsAssessmentReference",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsAssessmentReference"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/assessment_reference/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single assessment_reference item by unique identifier.",
        "tags": [
          "Items",
          "ItemsAssessmentReference"
        ],
        "operationId": "readSingleItemsAssessmentReference",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsAssessmentReference"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/assessment_reference_author": {
      "get": {
        "summary": "List Items",
        "description": "List the assessment_reference_author items.",
        "tags": [
          "Items",
          "ItemsAssessmentReferenceAuthor"
        ],
        "operationId": "readItemsAssessmentReferenceAuthor",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsAssessmentReferenceAuthor"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/assessment_reference_author/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single assessment_reference_author item by unique identifier.",
        "tags": [
          "Items",
          "ItemsAssessmentReferenceAuthor"
        ],
        "operationId": "readSingleItemsAssessmentReferenceAuthor",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsAssessmentReferenceAuthor"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/author": {
      "get": {
        "summary": "List Items",
        "description": "List the author items.",
        "tags": [
          "Items",
          "ItemsAuthor"
        ],
        "operationId": "readItemsAuthor",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsAuthor"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/author/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single author item by unique identifier.",
        "tags": [
          "Items",
          "ItemsAuthor"
        ],
        "operationId": "readSingleItemsAuthor",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsAuthor"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/behaviour_accommodation": {
      "get": {
        "summary": "List Items",
        "description": "List the behaviour_accommodation items.",
        "tags": [
          "Items",
          "ItemsBehaviourAccommodation"
        ],
        "operationId": "readItemsBehaviourAccommodation",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsBehaviourAccommodation"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/behaviour_accommodation/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single behaviour_accommodation item by unique identifier.",
        "tags": [
          "Items",
          "ItemsBehaviourAccommodation"
        ],
        "operationId": "readSingleItemsBehaviourAccommodation",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsBehaviourAccommodation"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/behaviour_guide": {
      "get": {
        "summary": "List Items",
        "description": "List the behaviour_guide items.",
        "tags": [
          "Items",
          "ItemsBehaviourGuide"
        ],
        "operationId": "readItemsBehaviourGuide",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsBehaviourGuide"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/behaviour_guide/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single behaviour_guide item by unique identifier.",
        "tags": [
          "Items",
          "ItemsBehaviourGuide"
        ],
        "operationId": "readSingleItemsBehaviourGuide",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsBehaviourGuide"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/behaviour_intervention": {
      "get": {
        "summary": "List Items",
        "description": "List the behaviour_intervention items.",
        "tags": [
          "Items",
          "ItemsBehaviourIntervention"
        ],
        "operationId": "readItemsBehaviourIntervention",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsBehaviourIntervention"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/behaviour_intervention/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single behaviour_intervention item by unique identifier.",
        "tags": [
          "Items",
          "ItemsBehaviourIntervention"
        ],
        "operationId": "readSingleItemsBehaviourIntervention",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsBehaviourIntervention"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/behaviour_questionnaire": {
      "get": {
        "summary": "List Items",
        "description": "List the behaviour_questionnaire items.",
        "tags": [
          "Items",
          "ItemsBehaviourQuestionnaire"
        ],
        "operationId": "readItemsBehaviourQuestionnaire",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsBehaviourQuestionnaire"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/behaviour_questionnaire/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single behaviour_questionnaire item by unique identifier.",
        "tags": [
          "Items",
          "ItemsBehaviourQuestionnaire"
        ],
        "operationId": "readSingleItemsBehaviourQuestionnaire",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsBehaviourQuestionnaire"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/behaviour_technology": {
      "get": {
        "summary": "List Items",
        "description": "List the behaviour_technology items.",
        "tags": [
          "Items",
          "ItemsBehaviourTechnology"
        ],
        "operationId": "readItemsBehaviourTechnology",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsBehaviourTechnology"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/behaviour_technology/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single behaviour_technology item by unique identifier.",
        "tags": [
          "Items",
          "ItemsBehaviourTechnology"
        ],
        "operationId": "readSingleItemsBehaviourTechnology",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsBehaviourTechnology"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/activity": {
      "get": {
        "operationId": "getActivities",
        "summary": "List Activity Actions",
        "description": "Returns a list of activity actions.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Activity"
                      }
                    }
                  }
                }
              }
            },
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Activity"
        ]
      }
    },
    "/activity/comment": {
      "post": {
        "summary": "Create a Comment",
        "description": "Creates a new comment.",
        "operationId": "createComment",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "collection",
                  "item",
                  "comment"
                ],
                "properties": {
                  "collection": {
                    "type": "string",
                    "example": "projects"
                  },
                  "item": {
                    "type": "integer",
                    "example": 1
                  },
                  "comment": {
                    "type": "string",
                    "example": "A new comment"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Activity"
                    }
                  }
                }
              }
            },
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Activity"
        ]
      }
    },
    "/activity/{id}": {
      "get": {
        "summary": "Retrieve an Activity Action",
        "description": "Retrieves the details of an existing activity action. Provide the primary key of the activity action and Directus will return the corresponding information.",
        "operationId": "getActivity",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          },
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Activity"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Activity"
        ]
      }
    },
    "/activity/comment/{id}": {},
    "/collections": {
      "get": {
        "summary": "List Collections",
        "description": "Returns a list of the collections available in the project.",
        "operationId": "getCollections",
        "parameters": [
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Collections"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Collections"
        ]
      }
    },
    "/collections/{id}": {
      "get": {
        "summary": "Retrieve a Collection",
        "description": "Retrieves the details of a single collection.",
        "operationId": "getCollection",
        "parameters": [
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Collections"
                    }
                  }
                }
              }
            },
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Collections"
        ]
      }
    },
    "/fields": {
      "get": {
        "summary": "List All Fields",
        "description": "Returns a list of the fields available in the project.",
        "operationId": "getFields",
        "parameters": [
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Sort"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Fields"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Fields"
        ]
      }
    },
    "/fields/{collection}": {
      "get": {
        "summary": "List Fields in Collection",
        "description": "Returns a list of the fields available in the given collection.",
        "operationId": "getCollectionFields",
        "parameters": [
          {
            "$ref": "#/components/parameters/Sort"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Fields"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Fields"
        ]
      }
    },
    "/fields/{collection}/{id}": {
      "get": {
        "summary": "Retrieve a Field",
        "description": "Retrieves the details of a single field in a given collection.",
        "operationId": "getCollectionField",
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Fields"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Fields"
        ]
      }
    },
    "/files": {
      "get": {
        "summary": "List Files",
        "description": "List the files.",
        "tags": [
          "Files"
        ],
        "operationId": "getFiles",
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Files"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "post": {
        "summary": "Create a File",
        "description": "Create a new file",
        "tags": [
          "Files"
        ],
        "operationId": "createFile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "data": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Files"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/files/{id}": {
      "get": {
        "summary": "Retrieve a Files",
        "description": "Retrieve a single file by unique identifier.",
        "tags": [
          "Files"
        ],
        "operationId": "getFile",
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Files"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "summary": "Update a File",
        "description": "Update an existing file.",
        "tags": [
          "Files"
        ],
        "operationId": "updateFile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Files"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete a File",
        "description": "Delete an existing file.",
        "tags": [
          "Files"
        ],
        "operationId": "deleteFile",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/folders": {
      "get": {
        "summary": "List Folders",
        "description": "List the folders.",
        "operationId": "getFolders",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Folders"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Folders"
        ]
      },
      "post": {
        "summary": "Create a Folder",
        "description": "Create a new folder.",
        "operationId": "createFolder",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Amsterdam",
                    "description": "Name of the folder."
                  },
                  "parent": {
                    "description": "Unique identifier of the parent folder. This allows for nested folders.",
                    "type": "integer"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Folders"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Folders"
        ]
      }
    },
    "/folders/{id}": {
      "get": {
        "summary": "Retrieve a Folder",
        "description": "Retrieve a single folder by unique identifier.",
        "operationId": "getFolder",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Folders"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Folders"
        ]
      },
      "patch": {
        "summary": "Update a Folder",
        "description": "Update an existing folder",
        "operationId": "updateFolder",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the folder. Can't be null or empty."
                  },
                  "parent": {
                    "type": "integer",
                    "example": 3,
                    "description": "Unique identifier of the parent folder. This allows for nested folders."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Folders"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Folders"
        ]
      },
      "delete": {
        "summary": "Delete a Folder",
        "description": "Delete an existing folder",
        "operationId": "deleteFolder",
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Folders"
        ]
      }
    },
    "/permissions": {
      "get": {
        "summary": "List Permissions",
        "description": "List all permissions.",
        "operationId": "getPermissions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Permissions"
        ]
      }
    },
    "/permissions/me": {
      "get": {
        "summary": "List My Permissions",
        "description": "List the permissions that apply to the current user.",
        "operationId": "getMyPermissions",
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Permissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Permissions"
        ]
      }
    },
    "/permissions/{id}": {
      "get": {
        "summary": "Retrieve a Permission",
        "description": "Retrieve a single permissions object by unique identifier.",
        "operationId": "getPermission",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Permissions"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Permissions"
        ]
      }
    },
    "/presets": {
      "get": {
        "tags": [
          "Presets"
        ],
        "operationId": "getPresets",
        "summary": "List Presets",
        "description": "List the presets.",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Page"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Presets"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "post": {
        "tags": [
          "Presets"
        ],
        "operationId": "createPreset",
        "summary": "Create a Preset",
        "description": "Create a new preset.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "collection"
                ],
                "properties": {
                  "collection": {
                    "type": "string",
                    "description": "What collection this collection preset is used for.",
                    "example": "articles"
                  },
                  "title": {
                    "type": "string",
                    "description": "Name for the bookmark. If this is set, the collection preset will be considered to be a bookmark.",
                    "example": "Highly rated articles"
                  },
                  "role": {
                    "type": "string",
                    "description": "The unique identifier of a role in the platform. If user is null, this will be used to apply the collection preset or bookmark for all users in the role.",
                    "example": null
                  },
                  "search": {
                    "type": "string",
                    "description": "What the user searched for in search/filter in the header bar."
                  },
                  "filters": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "type": "string",
                          "example": "aHKLAakdVghzD"
                        },
                        "field": {
                          "type": "string",
                          "example": "rating"
                        },
                        "operator": {
                          "type": "string",
                          "example": "gte"
                        },
                        "value": {
                          "type": "integer",
                          "example": 4.5
                        }
                      }
                    }
                  },
                  "layout": {
                    "type": "string",
                    "description": "Name of the view type that is used."
                  },
                  "layout_query": {
                    "type": "string",
                    "description": "Layout query that's saved per layout type. Controls what data is fetched on load. These follow the same format as the JS SDK parameters."
                  },
                  "layout_options": {
                    "type": "string",
                    "description": "Options of the views. The properties in here are controlled by the layout."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Presets"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/presets/{id}": {
      "get": {
        "tags": [
          "Presets"
        ],
        "operationId": "getPreset",
        "summary": "Retrieve a Preset",
        "description": "Retrieve a single preset by unique identifier.",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Presets"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "patch": {
        "tags": [
          "Presets"
        ],
        "operationId": "updatePreset",
        "summary": "Update a Preset",
        "description": "Update an existing preset.",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "collection"
                ],
                "properties": {
                  "collection": {
                    "type": "string",
                    "description": "What collection this collection preset is used for.",
                    "example": "articles"
                  },
                  "title": {
                    "type": "string",
                    "description": "Name for the bookmark. If this is set, the collection preset will be considered to be a bookmark.",
                    "example": "Highly rated articles"
                  },
                  "role": {
                    "type": "integer",
                    "description": "The unique identifier of a role in the platform. If user is null, this will be used to apply the collection preset or bookmark for all users in the role."
                  },
                  "search_query": {
                    "type": "string",
                    "description": "What the user searched for in search/filter in the header bar."
                  },
                  "filters": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "field": {
                          "type": "string",
                          "example": "rating"
                        },
                        "operator": {
                          "type": "string",
                          "example": "gte"
                        },
                        "value": {
                          "type": "integer",
                          "example": 4.5
                        }
                      }
                    }
                  },
                  "view_type": {
                    "type": "string",
                    "description": "Name of the view type that is used. Defaults to tabular."
                  },
                  "view_query": {
                    "type": "string",
                    "description": "View query that's saved per view type. Controls what data is fetched on load. These follow the same format as the JS SDK parameters."
                  },
                  "view_options": {
                    "type": "string",
                    "description": "Options of the views. The properties in here are controlled by the layout."
                  },
                  "translation": {
                    "type": "object",
                    "description": "Key value pair of language-translation. Can be used to translate the bookmark title in multiple languages."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Presets"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "tags": [
          "Presets"
        ],
        "operationId": "deletePreset",
        "summary": "Delete a Preset",
        "description": "Delete an existing preset.",
        "security": [
          {
            "Auth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/relations": {
      "get": {
        "summary": "List Relations",
        "description": "List the relations.",
        "operationId": "getRelations",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Relations"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Relations"
        ]
      }
    },
    "/relations/{id}": {
      "get": {
        "summary": "Retrieve a Relation",
        "description": "Retrieve a single relation by unique identifier.",
        "operationId": "getRelation",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Relations"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Relations"
        ]
      }
    },
    "/roles": {
      "get": {
        "summary": "List Roles",
        "description": "List the roles.",
        "operationId": "getRoles",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Roles"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Roles"
        ]
      }
    },
    "/roles/{id}": {
      "get": {
        "summary": "Retrieve a Role",
        "description": "Retrieve a single role by unique identifier.",
        "operationId": "getRole",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Roles"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Roles"
        ]
      }
    },
    "/settings": {
      "get": {
        "summary": "Retrieve Settings",
        "description": "List the settings.",
        "operationId": "getSettings",
        "parameters": [
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Page"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Settings"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Settings"
        ]
      }
    },
    "/users": {
      "get": {
        "summary": "List Users",
        "description": "List the users.",
        "operationId": "getUsers",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Users"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{id}": {
      "get": {
        "summary": "Retrieve a User",
        "description": "Retrieve a single user by unique identifier.",
        "operationId": "getUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Users"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Users"
        ]
      },
      "patch": {
        "summary": "Update a User",
        "description": "Update an existing user",
        "operationId": "updateUser",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Users"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "data": {
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/users/invite": {},
    "/users/invite/accept": {},
    "/users/me": {
      "get": {
        "summary": "Retrieve Current User",
        "description": "Retrieve the currently authenticated user.",
        "operationId": "getMe",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Users"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Users"
        ]
      },
      "patch": {
        "summary": "Update Current User",
        "description": "Update the currently authenticated user.",
        "operationId": "updateMe",
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Users"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/users/me/track/page": {
      "patch": {
        "summary": "Update Last Page",
        "description": "Updates the last used page field of the currently authenticated user. This is used internally to be able to open the Directus admin app from the last page you used.",
        "operationId": "updateLastUsedPageMe",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "last_page": {
                    "description": "Path of the page you used last.",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        },
        "tags": [
          "Users"
        ]
      }
    },
    "/users/me/tfa/enable": {},
    "/users/me/tfa/disable": {},
    "/items/disorder": {
      "get": {
        "summary": "List Items",
        "description": "List the disorder items.",
        "tags": [
          "Items",
          "ItemsDisorder"
        ],
        "operationId": "readItemsDisorder",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsDisorder"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/disorder/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single disorder item by unique identifier.",
        "tags": [
          "Items",
          "ItemsDisorder"
        ],
        "operationId": "readSingleItemsDisorder",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsDisorder"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/disorder_accommodation": {
      "get": {
        "summary": "List Items",
        "description": "List the disorder_accommodation items.",
        "tags": [
          "Items",
          "ItemsDisorderAccommodation"
        ],
        "operationId": "readItemsDisorderAccommodation",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsDisorderAccommodation"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/disorder_accommodation/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single disorder_accommodation item by unique identifier.",
        "tags": [
          "Items",
          "ItemsDisorderAccommodation"
        ],
        "operationId": "readSingleItemsDisorderAccommodation",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsDisorderAccommodation"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/disorder_category": {
      "get": {
        "summary": "List Items",
        "description": "List the disorder_category items.",
        "tags": [
          "Items",
          "ItemsDisorderCategory"
        ],
        "operationId": "readItemsDisorderCategory",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsDisorderCategory"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/disorder_category/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single disorder_category item by unique identifier.",
        "tags": [
          "Items",
          "ItemsDisorderCategory"
        ],
        "operationId": "readSingleItemsDisorderCategory",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsDisorderCategory"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/disorder_category_accommodation": {
      "get": {
        "summary": "List Items",
        "description": "List the disorder_category_accommodation items.",
        "tags": [
          "Items",
          "ItemsDisorderCategoryAccommodation"
        ],
        "operationId": "readItemsDisorderCategoryAccommodation",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsDisorderCategoryAccommodation"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/disorder_category_accommodation/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single disorder_category_accommodation item by unique identifier.",
        "tags": [
          "Items",
          "ItemsDisorderCategoryAccommodation"
        ],
        "operationId": "readSingleItemsDisorderCategoryAccommodation",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsDisorderCategoryAccommodation"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/disorder_category_intervention": {
      "get": {
        "summary": "List Items",
        "description": "List the disorder_category_intervention items.",
        "tags": [
          "Items",
          "ItemsDisorderCategoryIntervention"
        ],
        "operationId": "readItemsDisorderCategoryIntervention",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsDisorderCategoryIntervention"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/disorder_category_intervention/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single disorder_category_intervention item by unique identifier.",
        "tags": [
          "Items",
          "ItemsDisorderCategoryIntervention"
        ],
        "operationId": "readSingleItemsDisorderCategoryIntervention",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsDisorderCategoryIntervention"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/disorder_category_technology": {
      "get": {
        "summary": "List Items",
        "description": "List the disorder_category_technology items.",
        "tags": [
          "Items",
          "ItemsDisorderCategoryTechnology"
        ],
        "operationId": "readItemsDisorderCategoryTechnology",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsDisorderCategoryTechnology"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/disorder_category_technology/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single disorder_category_technology item by unique identifier.",
        "tags": [
          "Items",
          "ItemsDisorderCategoryTechnology"
        ],
        "operationId": "readSingleItemsDisorderCategoryTechnology",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsDisorderCategoryTechnology"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/disorder_intervention": {
      "get": {
        "summary": "List Items",
        "description": "List the disorder_intervention items.",
        "tags": [
          "Items",
          "ItemsDisorderIntervention"
        ],
        "operationId": "readItemsDisorderIntervention",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsDisorderIntervention"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/disorder_intervention/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single disorder_intervention item by unique identifier.",
        "tags": [
          "Items",
          "ItemsDisorderIntervention"
        ],
        "operationId": "readSingleItemsDisorderIntervention",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsDisorderIntervention"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/disorder_reference": {
      "get": {
        "summary": "List Items",
        "description": "List the disorder_reference items.",
        "tags": [
          "Items",
          "ItemsDisorderReference"
        ],
        "operationId": "readItemsDisorderReference",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsDisorderReference"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/disorder_reference/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single disorder_reference item by unique identifier.",
        "tags": [
          "Items",
          "ItemsDisorderReference"
        ],
        "operationId": "readSingleItemsDisorderReference",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsDisorderReference"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/disorder_reference_author": {
      "get": {
        "summary": "List Items",
        "description": "List the disorder_reference_author items.",
        "tags": [
          "Items",
          "ItemsDisorderReferenceAuthor"
        ],
        "operationId": "readItemsDisorderReferenceAuthor",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsDisorderReferenceAuthor"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/disorder_reference_author/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single disorder_reference_author item by unique identifier.",
        "tags": [
          "Items",
          "ItemsDisorderReferenceAuthor"
        ],
        "operationId": "readSingleItemsDisorderReferenceAuthor",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsDisorderReferenceAuthor"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/disorder_sign_symptom": {
      "get": {
        "summary": "List Items",
        "description": "List the disorder_sign_symptom items.",
        "tags": [
          "Items",
          "ItemsDisorderSignSymptom"
        ],
        "operationId": "readItemsDisorderSignSymptom",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsDisorderSignSymptom"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/disorder_sign_symptom/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single disorder_sign_symptom item by unique identifier.",
        "tags": [
          "Items",
          "ItemsDisorderSignSymptom"
        ],
        "operationId": "readSingleItemsDisorderSignSymptom",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsDisorderSignSymptom"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/disorder_subcategory": {
      "get": {
        "summary": "List Items",
        "description": "List the disorder_subcategory items.",
        "tags": [
          "Items",
          "ItemsDisorderSubcategory"
        ],
        "operationId": "readItemsDisorderSubcategory",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsDisorderSubcategory"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/disorder_subcategory/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single disorder_subcategory item by unique identifier.",
        "tags": [
          "Items",
          "ItemsDisorderSubcategory"
        ],
        "operationId": "readSingleItemsDisorderSubcategory",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsDisorderSubcategory"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/disorder_technology": {
      "get": {
        "summary": "List Items",
        "description": "List the disorder_technology items.",
        "tags": [
          "Items",
          "ItemsDisorderTechnology"
        ],
        "operationId": "readItemsDisorderTechnology",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsDisorderTechnology"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/disorder_technology/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single disorder_technology item by unique identifier.",
        "tags": [
          "Items",
          "ItemsDisorderTechnology"
        ],
        "operationId": "readSingleItemsDisorderTechnology",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsDisorderTechnology"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/guide": {
      "get": {
        "summary": "List Items",
        "description": "List the guide items.",
        "tags": [
          "Items",
          "ItemsGuide"
        ],
        "operationId": "readItemsGuide",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsGuide"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/guide/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single guide item by unique identifier.",
        "tags": [
          "Items",
          "ItemsGuide"
        ],
        "operationId": "readSingleItemsGuide",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsGuide"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/guide_accommodation": {
      "get": {
        "summary": "List Items",
        "description": "List the guide_accommodation items.",
        "tags": [
          "Items",
          "ItemsGuideAccommodation"
        ],
        "operationId": "readItemsGuideAccommodation",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsGuideAccommodation"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/guide_accommodation/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single guide_accommodation item by unique identifier.",
        "tags": [
          "Items",
          "ItemsGuideAccommodation"
        ],
        "operationId": "readSingleItemsGuideAccommodation",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsGuideAccommodation"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/guide_audience": {
      "get": {
        "summary": "List Items",
        "description": "List the guide_audience items.",
        "tags": [
          "Items",
          "ItemsGuideAudience"
        ],
        "operationId": "readItemsGuideAudience",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsGuideAudience"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/guide_audience/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single guide_audience item by unique identifier.",
        "tags": [
          "Items",
          "ItemsGuideAudience"
        ],
        "operationId": "readSingleItemsGuideAudience",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsGuideAudience"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/guide_author": {
      "get": {
        "summary": "List Items",
        "description": "List the guide_author items.",
        "tags": [
          "Items",
          "ItemsGuideAuthor"
        ],
        "operationId": "readItemsGuideAuthor",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsGuideAuthor"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/guide_author/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single guide_author item by unique identifier.",
        "tags": [
          "Items",
          "ItemsGuideAuthor"
        ],
        "operationId": "readSingleItemsGuideAuthor",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsGuideAuthor"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/guide_disorder": {
      "get": {
        "summary": "List Items",
        "description": "List the guide_disorder items.",
        "tags": [
          "Items",
          "ItemsGuideDisorder"
        ],
        "operationId": "readItemsGuideDisorder",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsGuideDisorder"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/guide_disorder/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single guide_disorder item by unique identifier.",
        "tags": [
          "Items",
          "ItemsGuideDisorder"
        ],
        "operationId": "readSingleItemsGuideDisorder",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsGuideDisorder"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/guide_disorder_category": {
      "get": {
        "summary": "List Items",
        "description": "List the guide_disorder_category items.",
        "tags": [
          "Items",
          "ItemsGuideDisorderCategory"
        ],
        "operationId": "readItemsGuideDisorderCategory",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsGuideDisorderCategory"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/guide_disorder_category/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single guide_disorder_category item by unique identifier.",
        "tags": [
          "Items",
          "ItemsGuideDisorderCategory"
        ],
        "operationId": "readSingleItemsGuideDisorderCategory",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsGuideDisorderCategory"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/guide_guide_type": {
      "get": {
        "summary": "List Items",
        "description": "List the guide_guide_type items.",
        "tags": [
          "Items",
          "ItemsGuideGuideType"
        ],
        "operationId": "readItemsGuideGuideType",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsGuideGuideType"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/guide_guide_type/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single guide_guide_type item by unique identifier.",
        "tags": [
          "Items",
          "ItemsGuideGuideType"
        ],
        "operationId": "readSingleItemsGuideGuideType",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsGuideGuideType"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/guide_intervention": {
      "get": {
        "summary": "List Items",
        "description": "List the guide_intervention items.",
        "tags": [
          "Items",
          "ItemsGuideIntervention"
        ],
        "operationId": "readItemsGuideIntervention",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsGuideIntervention"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/guide_intervention/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single guide_intervention item by unique identifier.",
        "tags": [
          "Items",
          "ItemsGuideIntervention"
        ],
        "operationId": "readSingleItemsGuideIntervention",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsGuideIntervention"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/guide_reference": {
      "get": {
        "summary": "List Items",
        "description": "List the guide_reference items.",
        "tags": [
          "Items",
          "ItemsGuideReference"
        ],
        "operationId": "readItemsGuideReference",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsGuideReference"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/guide_reference/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single guide_reference item by unique identifier.",
        "tags": [
          "Items",
          "ItemsGuideReference"
        ],
        "operationId": "readSingleItemsGuideReference",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsGuideReference"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/guide_technology": {
      "get": {
        "summary": "List Items",
        "description": "List the guide_technology items.",
        "tags": [
          "Items",
          "ItemsGuideTechnology"
        ],
        "operationId": "readItemsGuideTechnology",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsGuideTechnology"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/guide_technology/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single guide_technology item by unique identifier.",
        "tags": [
          "Items",
          "ItemsGuideTechnology"
        ],
        "operationId": "readSingleItemsGuideTechnology",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsGuideTechnology"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/guide_type": {
      "get": {
        "summary": "List Items",
        "description": "List the guide_type items.",
        "tags": [
          "Items",
          "ItemsGuideType"
        ],
        "operationId": "readItemsGuideType",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsGuideType"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/guide_type/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single guide_type item by unique identifier.",
        "tags": [
          "Items",
          "ItemsGuideType"
        ],
        "operationId": "readSingleItemsGuideType",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsGuideType"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/intervention": {
      "get": {
        "summary": "List Items",
        "description": "List the intervention items.",
        "tags": [
          "Items",
          "ItemsIntervention"
        ],
        "operationId": "readItemsIntervention",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsIntervention"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/intervention/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single intervention item by unique identifier.",
        "tags": [
          "Items",
          "ItemsIntervention"
        ],
        "operationId": "readSingleItemsIntervention",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsIntervention"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/intervention_research_evidence": {
      "get": {
        "summary": "List Items",
        "description": "List the intervention_research_evidence items.",
        "tags": [
          "Items",
          "ItemsInterventionResearchEvidence"
        ],
        "operationId": "readItemsInterventionResearchEvidence",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsInterventionResearchEvidence"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/intervention_research_evidence/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single intervention_research_evidence item by unique identifier.",
        "tags": [
          "Items",
          "ItemsInterventionResearchEvidence"
        ],
        "operationId": "readSingleItemsInterventionResearchEvidence",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsInterventionResearchEvidence"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/language_source": {
      "get": {
        "summary": "List Items",
        "description": "List the language_source items.",
        "tags": [
          "Items",
          "ItemsLanguageSource"
        ],
        "operationId": "readItemsLanguageSource",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsLanguageSource"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/language_source/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single language_source item by unique identifier.",
        "tags": [
          "Items",
          "ItemsLanguageSource"
        ],
        "operationId": "readSingleItemsLanguageSource",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsLanguageSource"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/lisa_author": {
      "get": {
        "summary": "List Items",
        "description": "List the lisa_author items.",
        "tags": [
          "Items",
          "ItemsLisaAuthor"
        ],
        "operationId": "readItemsLisaAuthor",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsLisaAuthor"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/lisa_author/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single lisa_author item by unique identifier.",
        "tags": [
          "Items",
          "ItemsLisaAuthor"
        ],
        "operationId": "readSingleItemsLisaAuthor",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsLisaAuthor"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/lisa_domain": {
      "get": {
        "summary": "List Items",
        "description": "List the lisa_domain items.",
        "tags": [
          "Items",
          "ItemsLisaDomain"
        ],
        "operationId": "readItemsLisaDomain",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsLisaDomain"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/lisa_domain/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single lisa_domain item by unique identifier.",
        "tags": [
          "Items",
          "ItemsLisaDomain"
        ],
        "operationId": "readSingleItemsLisaDomain",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsLisaDomain"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/lisa_domain_category": {
      "get": {
        "summary": "List Items",
        "description": "List the lisa_domain_category items.",
        "tags": [
          "Items",
          "ItemsLisaDomainCategory"
        ],
        "operationId": "readItemsLisaDomainCategory",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsLisaDomainCategory"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/lisa_domain_category/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single lisa_domain_category item by unique identifier.",
        "tags": [
          "Items",
          "ItemsLisaDomainCategory"
        ],
        "operationId": "readSingleItemsLisaDomainCategory",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsLisaDomainCategory"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/lisa_domain_category_locale": {
      "get": {
        "summary": "List Items",
        "description": "List the lisa_domain_category_locale items.",
        "tags": [
          "Items",
          "ItemsLisaDomainCategoryLocale"
        ],
        "operationId": "readItemsLisaDomainCategoryLocale",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsLisaDomainCategoryLocale"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/lisa_domain_category_locale/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single lisa_domain_category_locale item by unique identifier.",
        "tags": [
          "Items",
          "ItemsLisaDomainCategoryLocale"
        ],
        "operationId": "readSingleItemsLisaDomainCategoryLocale",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsLisaDomainCategoryLocale"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/lisa_domain_category_locale_author": {
      "get": {
        "summary": "List Items",
        "description": "List the lisa_domain_category_locale_author items.",
        "tags": [
          "Items",
          "ItemsLisaDomainCategoryLocaleAuthor"
        ],
        "operationId": "readItemsLisaDomainCategoryLocaleAuthor",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsLisaDomainCategoryLocaleAuthor"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/lisa_domain_category_locale_author/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single lisa_domain_category_locale_author item by unique identifier.",
        "tags": [
          "Items",
          "ItemsLisaDomainCategoryLocaleAuthor"
        ],
        "operationId": "readSingleItemsLisaDomainCategoryLocaleAuthor",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsLisaDomainCategoryLocaleAuthor"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/lisa_domain_category_locale_version": {
      "get": {
        "summary": "List Items",
        "description": "List the lisa_domain_category_locale_version items.",
        "tags": [
          "Items",
          "ItemsLisaDomainCategoryLocaleVersion"
        ],
        "operationId": "readItemsLisaDomainCategoryLocaleVersion",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsLisaDomainCategoryLocaleVersion"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/lisa_domain_category_locale_version/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single lisa_domain_category_locale_version item by unique identifier.",
        "tags": [
          "Items",
          "ItemsLisaDomainCategoryLocaleVersion"
        ],
        "operationId": "readSingleItemsLisaDomainCategoryLocaleVersion",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsLisaDomainCategoryLocaleVersion"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/lisa_domain_guide": {
      "get": {
        "summary": "List Items",
        "description": "List the lisa_domain_guide items.",
        "tags": [
          "Items",
          "ItemsLisaDomainGuide"
        ],
        "operationId": "readItemsLisaDomainGuide",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsLisaDomainGuide"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/lisa_domain_guide/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single lisa_domain_guide item by unique identifier.",
        "tags": [
          "Items",
          "ItemsLisaDomainGuide"
        ],
        "operationId": "readSingleItemsLisaDomainGuide",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsLisaDomainGuide"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/lisa_domain_guide_locale": {
      "get": {
        "summary": "List Items",
        "description": "List the lisa_domain_guide_locale items.",
        "tags": [
          "Items",
          "ItemsLisaDomainGuideLocale"
        ],
        "operationId": "readItemsLisaDomainGuideLocale",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsLisaDomainGuideLocale"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/lisa_domain_guide_locale/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single lisa_domain_guide_locale item by unique identifier.",
        "tags": [
          "Items",
          "ItemsLisaDomainGuideLocale"
        ],
        "operationId": "readSingleItemsLisaDomainGuideLocale",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsLisaDomainGuideLocale"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/lisa_domain_locale": {
      "get": {
        "summary": "List Items",
        "description": "List the lisa_domain_locale items.",
        "tags": [
          "Items",
          "ItemsLisaDomainLocale"
        ],
        "operationId": "readItemsLisaDomainLocale",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsLisaDomainLocale"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/lisa_domain_locale/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single lisa_domain_locale item by unique identifier.",
        "tags": [
          "Items",
          "ItemsLisaDomainLocale"
        ],
        "operationId": "readSingleItemsLisaDomainLocale",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsLisaDomainLocale"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/lisa_domain_locale_author": {
      "get": {
        "summary": "List Items",
        "description": "List the lisa_domain_locale_author items.",
        "tags": [
          "Items",
          "ItemsLisaDomainLocaleAuthor"
        ],
        "operationId": "readItemsLisaDomainLocaleAuthor",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsLisaDomainLocaleAuthor"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/lisa_domain_locale_author/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single lisa_domain_locale_author item by unique identifier.",
        "tags": [
          "Items",
          "ItemsLisaDomainLocaleAuthor"
        ],
        "operationId": "readSingleItemsLisaDomainLocaleAuthor",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsLisaDomainLocaleAuthor"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/lisa_domain_locale_version": {
      "get": {
        "summary": "List Items",
        "description": "List the lisa_domain_locale_version items.",
        "tags": [
          "Items",
          "ItemsLisaDomainLocaleVersion"
        ],
        "operationId": "readItemsLisaDomainLocaleVersion",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsLisaDomainLocaleVersion"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/lisa_domain_locale_version/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single lisa_domain_locale_version item by unique identifier.",
        "tags": [
          "Items",
          "ItemsLisaDomainLocaleVersion"
        ],
        "operationId": "readSingleItemsLisaDomainLocaleVersion",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsLisaDomainLocaleVersion"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/lisa_guide": {
      "get": {
        "summary": "List Items",
        "description": "List the lisa_guide items.",
        "tags": [
          "Items",
          "ItemsLisaGuide"
        ],
        "operationId": "readItemsLisaGuide",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsLisaGuide"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/lisa_guide/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single lisa_guide item by unique identifier.",
        "tags": [
          "Items",
          "ItemsLisaGuide"
        ],
        "operationId": "readSingleItemsLisaGuide",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsLisaGuide"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/lisa_guide_locale": {
      "get": {
        "summary": "List Items",
        "description": "List the lisa_guide_locale items.",
        "tags": [
          "Items",
          "ItemsLisaGuideLocale"
        ],
        "operationId": "readItemsLisaGuideLocale",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsLisaGuideLocale"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/lisa_guide_locale/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single lisa_guide_locale item by unique identifier.",
        "tags": [
          "Items",
          "ItemsLisaGuideLocale"
        ],
        "operationId": "readSingleItemsLisaGuideLocale",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsLisaGuideLocale"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/lisa_guide_locale_author": {
      "get": {
        "summary": "List Items",
        "description": "List the lisa_guide_locale_author items.",
        "tags": [
          "Items",
          "ItemsLisaGuideLocaleAuthor"
        ],
        "operationId": "readItemsLisaGuideLocaleAuthor",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsLisaGuideLocaleAuthor"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/lisa_guide_locale_author/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single lisa_guide_locale_author item by unique identifier.",
        "tags": [
          "Items",
          "ItemsLisaGuideLocaleAuthor"
        ],
        "operationId": "readSingleItemsLisaGuideLocaleAuthor",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsLisaGuideLocaleAuthor"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/lisa_guide_locale_version": {
      "get": {
        "summary": "List Items",
        "description": "List the lisa_guide_locale_version items.",
        "tags": [
          "Items",
          "ItemsLisaGuideLocaleVersion"
        ],
        "operationId": "readItemsLisaGuideLocaleVersion",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsLisaGuideLocaleVersion"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/lisa_guide_locale_version/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single lisa_guide_locale_version item by unique identifier.",
        "tags": [
          "Items",
          "ItemsLisaGuideLocaleVersion"
        ],
        "operationId": "readSingleItemsLisaGuideLocaleVersion",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsLisaGuideLocaleVersion"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/lisa_static_content": {
      "get": {
        "summary": "List Items",
        "description": "List the lisa_static_content items.",
        "tags": [
          "Items",
          "ItemsLisaStaticContent"
        ],
        "operationId": "readItemsLisaStaticContent",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsLisaStaticContent"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/lisa_static_content/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single lisa_static_content item by unique identifier.",
        "tags": [
          "Items",
          "ItemsLisaStaticContent"
        ],
        "operationId": "readSingleItemsLisaStaticContent",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsLisaStaticContent"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/lisa_static_content_locale": {
      "get": {
        "summary": "List Items",
        "description": "List the lisa_static_content_locale items.",
        "tags": [
          "Items",
          "ItemsLisaStaticContentLocale"
        ],
        "operationId": "readItemsLisaStaticContentLocale",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsLisaStaticContentLocale"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/lisa_static_content_locale/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single lisa_static_content_locale item by unique identifier.",
        "tags": [
          "Items",
          "ItemsLisaStaticContentLocale"
        ],
        "operationId": "readSingleItemsLisaStaticContentLocale",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsLisaStaticContentLocale"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/lisa_static_content_locale_version": {
      "get": {
        "summary": "List Items",
        "description": "List the lisa_static_content_locale_version items.",
        "tags": [
          "Items",
          "ItemsLisaStaticContentLocaleVersion"
        ],
        "operationId": "readItemsLisaStaticContentLocaleVersion",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsLisaStaticContentLocaleVersion"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/lisa_static_content_locale_version/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single lisa_static_content_locale_version item by unique identifier.",
        "tags": [
          "Items",
          "ItemsLisaStaticContentLocaleVersion"
        ],
        "operationId": "readSingleItemsLisaStaticContentLocaleVersion",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsLisaStaticContentLocaleVersion"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/locale": {
      "get": {
        "summary": "List Items",
        "description": "List the locale items.",
        "tags": [
          "Items",
          "ItemsLocale"
        ],
        "operationId": "readItemsLocale",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsLocale"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/locale/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single locale item by unique identifier.",
        "tags": [
          "Items",
          "ItemsLocale"
        ],
        "operationId": "readSingleItemsLocale",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsLocale"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/neutral_construct": {
      "get": {
        "summary": "List Items",
        "description": "List the neutral_construct items.",
        "tags": [
          "Items",
          "ItemsNeutralConstruct"
        ],
        "operationId": "readItemsNeutralConstruct",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsNeutralConstruct"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/neutral_construct/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single neutral_construct item by unique identifier.",
        "tags": [
          "Items",
          "ItemsNeutralConstruct"
        ],
        "operationId": "readSingleItemsNeutralConstruct",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsNeutralConstruct"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/question": {
      "get": {
        "summary": "List Items",
        "description": "List the question items.",
        "tags": [
          "Items",
          "ItemsQuestion"
        ],
        "operationId": "readItemsQuestion",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsQuestion"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/question/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single question item by unique identifier.",
        "tags": [
          "Items",
          "ItemsQuestion"
        ],
        "operationId": "readSingleItemsQuestion",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsQuestion"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/question_response_type": {
      "get": {
        "summary": "List Items",
        "description": "List the question_response_type items.",
        "tags": [
          "Items",
          "ItemsQuestionResponseType"
        ],
        "operationId": "readItemsQuestionResponseType",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsQuestionResponseType"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/question_response_type/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single question_response_type item by unique identifier.",
        "tags": [
          "Items",
          "ItemsQuestionResponseType"
        ],
        "operationId": "readSingleItemsQuestionResponseType",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsQuestionResponseType"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/questionnaire": {
      "get": {
        "summary": "List Items",
        "description": "List the questionnaire items.",
        "tags": [
          "Items",
          "ItemsQuestionnaire"
        ],
        "operationId": "readItemsQuestionnaire",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsQuestionnaire"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/questionnaire/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single questionnaire item by unique identifier.",
        "tags": [
          "Items",
          "ItemsQuestionnaire"
        ],
        "operationId": "readSingleItemsQuestionnaire",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsQuestionnaire"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/questionnaire_assessment_reference": {
      "get": {
        "summary": "List Items",
        "description": "List the questionnaire_assessment_reference items.",
        "tags": [
          "Items",
          "ItemsQuestionnaireAssessmentReference"
        ],
        "operationId": "readItemsQuestionnaireAssessmentReference",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsQuestionnaireAssessmentReference"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/questionnaire_assessment_reference/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single questionnaire_assessment_reference item by unique identifier.",
        "tags": [
          "Items",
          "ItemsQuestionnaireAssessmentReference"
        ],
        "operationId": "readSingleItemsQuestionnaireAssessmentReference",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsQuestionnaireAssessmentReference"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/questionnaire_author": {
      "get": {
        "summary": "List Items",
        "description": "List the questionnaire_author items.",
        "tags": [
          "Items",
          "ItemsQuestionnaireAuthor"
        ],
        "operationId": "readItemsQuestionnaireAuthor",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsQuestionnaireAuthor"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/questionnaire_author/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single questionnaire_author item by unique identifier.",
        "tags": [
          "Items",
          "ItemsQuestionnaireAuthor"
        ],
        "operationId": "readSingleItemsQuestionnaireAuthor",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsQuestionnaireAuthor"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/questionnaire_disorder": {
      "get": {
        "summary": "List Items",
        "description": "List the questionnaire_disorder items.",
        "tags": [
          "Items",
          "ItemsQuestionnaireDisorder"
        ],
        "operationId": "readItemsQuestionnaireDisorder",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsQuestionnaireDisorder"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/questionnaire_disorder/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single questionnaire_disorder item by unique identifier.",
        "tags": [
          "Items",
          "ItemsQuestionnaireDisorder"
        ],
        "operationId": "readSingleItemsQuestionnaireDisorder",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsQuestionnaireDisorder"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/questionnaire_disorder_category": {
      "get": {
        "summary": "List Items",
        "description": "List the questionnaire_disorder_category items.",
        "tags": [
          "Items",
          "ItemsQuestionnaireDisorderCategory"
        ],
        "operationId": "readItemsQuestionnaireDisorderCategory",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsQuestionnaireDisorderCategory"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/questionnaire_disorder_category/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single questionnaire_disorder_category item by unique identifier.",
        "tags": [
          "Items",
          "ItemsQuestionnaireDisorderCategory"
        ],
        "operationId": "readSingleItemsQuestionnaireDisorderCategory",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsQuestionnaireDisorderCategory"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/questionnaire_language_not_mhdb": {
      "get": {
        "summary": "List Items",
        "description": "List the questionnaire_language_not_mhdb items.",
        "tags": [
          "Items",
          "ItemsQuestionnaireLanguageNotMhdb"
        ],
        "operationId": "readItemsQuestionnaireLanguageNotMhdb",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsQuestionnaireLanguageNotMhdb"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/questionnaire_language_not_mhdb/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single questionnaire_language_not_mhdb item by unique identifier.",
        "tags": [
          "Items",
          "ItemsQuestionnaireLanguageNotMhdb"
        ],
        "operationId": "readSingleItemsQuestionnaireLanguageNotMhdb",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsQuestionnaireLanguageNotMhdb"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/questionnaire_respondent": {
      "get": {
        "summary": "List Items",
        "description": "List the questionnaire_respondent items.",
        "tags": [
          "Items",
          "ItemsQuestionnaireRespondent"
        ],
        "operationId": "readItemsQuestionnaireRespondent",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsQuestionnaireRespondent"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/questionnaire_respondent/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single questionnaire_respondent item by unique identifier.",
        "tags": [
          "Items",
          "ItemsQuestionnaireRespondent"
        ],
        "operationId": "readSingleItemsQuestionnaireRespondent",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsQuestionnaireRespondent"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/questionnaire_sign_symptom": {
      "get": {
        "summary": "List Items",
        "description": "List the questionnaire_sign_symptom items.",
        "tags": [
          "Items",
          "ItemsQuestionnaireSignSymptom"
        ],
        "operationId": "readItemsQuestionnaireSignSymptom",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsQuestionnaireSignSymptom"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/questionnaire_sign_symptom/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single questionnaire_sign_symptom item by unique identifier.",
        "tags": [
          "Items",
          "ItemsQuestionnaireSignSymptom"
        ],
        "operationId": "readSingleItemsQuestionnaireSignSymptom",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsQuestionnaireSignSymptom"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/questionnaire_subject": {
      "get": {
        "summary": "List Items",
        "description": "List the questionnaire_subject items.",
        "tags": [
          "Items",
          "ItemsQuestionnaireSubject"
        ],
        "operationId": "readItemsQuestionnaireSubject",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsQuestionnaireSubject"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/questionnaire_subject/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single questionnaire_subject item by unique identifier.",
        "tags": [
          "Items",
          "ItemsQuestionnaireSubject"
        ],
        "operationId": "readSingleItemsQuestionnaireSubject",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsQuestionnaireSubject"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/research_evidence": {
      "get": {
        "summary": "List Items",
        "description": "List the research_evidence items.",
        "tags": [
          "Items",
          "ItemsResearchEvidence"
        ],
        "operationId": "readItemsResearchEvidence",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsResearchEvidence"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/research_evidence/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single research_evidence item by unique identifier.",
        "tags": [
          "Items",
          "ItemsResearchEvidence"
        ],
        "operationId": "readSingleItemsResearchEvidence",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsResearchEvidence"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/resource_people_audience": {
      "get": {
        "summary": "List Items",
        "description": "List the resource_people_audience items.",
        "tags": [
          "Items",
          "ItemsResourcePeopleAudience"
        ],
        "operationId": "readItemsResourcePeopleAudience",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsResourcePeopleAudience"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/resource_people_audience/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single resource_people_audience item by unique identifier.",
        "tags": [
          "Items",
          "ItemsResourcePeopleAudience"
        ],
        "operationId": "readSingleItemsResourcePeopleAudience",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsResourcePeopleAudience"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/response_type": {
      "get": {
        "summary": "List Items",
        "description": "List the response_type items.",
        "tags": [
          "Items",
          "ItemsResponseType"
        ],
        "operationId": "readItemsResponseType",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsResponseType"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/response_type/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single response_type item by unique identifier.",
        "tags": [
          "Items",
          "ItemsResponseType"
        ],
        "operationId": "readSingleItemsResponseType",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsResponseType"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/sign_symptom": {
      "get": {
        "summary": "List Items",
        "description": "List the sign_symptom items.",
        "tags": [
          "Items",
          "ItemsSignSymptom"
        ],
        "operationId": "readItemsSignSymptom",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsSignSymptom"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/sign_symptom/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single sign_symptom item by unique identifier.",
        "tags": [
          "Items",
          "ItemsSignSymptom"
        ],
        "operationId": "readSingleItemsSignSymptom",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsSignSymptom"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/sign_symptom_accommodation": {
      "get": {
        "summary": "List Items",
        "description": "List the sign_symptom_accommodation items.",
        "tags": [
          "Items",
          "ItemsSignSymptomAccommodation"
        ],
        "operationId": "readItemsSignSymptomAccommodation",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsSignSymptomAccommodation"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/sign_symptom_accommodation/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single sign_symptom_accommodation item by unique identifier.",
        "tags": [
          "Items",
          "ItemsSignSymptomAccommodation"
        ],
        "operationId": "readSingleItemsSignSymptomAccommodation",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsSignSymptomAccommodation"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/sign_symptom_example": {
      "get": {
        "summary": "List Items",
        "description": "List the sign_symptom_example items.",
        "tags": [
          "Items",
          "ItemsSignSymptomExample"
        ],
        "operationId": "readItemsSignSymptomExample",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsSignSymptomExample"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/sign_symptom_example/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single sign_symptom_example item by unique identifier.",
        "tags": [
          "Items",
          "ItemsSignSymptomExample"
        ],
        "operationId": "readSingleItemsSignSymptomExample",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsSignSymptomExample"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/sign_symptom_intervention": {
      "get": {
        "summary": "List Items",
        "description": "List the sign_symptom_intervention items.",
        "tags": [
          "Items",
          "ItemsSignSymptomIntervention"
        ],
        "operationId": "readItemsSignSymptomIntervention",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsSignSymptomIntervention"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/sign_symptom_intervention/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single sign_symptom_intervention item by unique identifier.",
        "tags": [
          "Items",
          "ItemsSignSymptomIntervention"
        ],
        "operationId": "readSingleItemsSignSymptomIntervention",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsSignSymptomIntervention"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/sign_symptom_neutral_construct": {
      "get": {
        "summary": "List Items",
        "description": "List the sign_symptom_neutral_construct items.",
        "tags": [
          "Items",
          "ItemsSignSymptomNeutralConstruct"
        ],
        "operationId": "readItemsSignSymptomNeutralConstruct",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsSignSymptomNeutralConstruct"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/sign_symptom_neutral_construct/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single sign_symptom_neutral_construct item by unique identifier.",
        "tags": [
          "Items",
          "ItemsSignSymptomNeutralConstruct"
        ],
        "operationId": "readSingleItemsSignSymptomNeutralConstruct",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsSignSymptomNeutralConstruct"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/sign_symptom_technology": {
      "get": {
        "summary": "List Items",
        "description": "List the sign_symptom_technology items.",
        "tags": [
          "Items",
          "ItemsSignSymptomTechnology"
        ],
        "operationId": "readItemsSignSymptomTechnology",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsSignSymptomTechnology"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/sign_symptom_technology/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single sign_symptom_technology item by unique identifier.",
        "tags": [
          "Items",
          "ItemsSignSymptomTechnology"
        ],
        "operationId": "readSingleItemsSignSymptomTechnology",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsSignSymptomTechnology"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/sign_symptom_with_example": {
      "get": {
        "summary": "List Items",
        "description": "List the sign_symptom_with_example items.",
        "tags": [
          "Items",
          "ItemsSignSymptomwithExample"
        ],
        "operationId": "readItemsSignSymptomwithExample",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsSignSymptomwithExample"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/sign_symptom_with_example/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single sign_symptom_with_example item by unique identifier.",
        "tags": [
          "Items",
          "ItemsSignSymptomwithExample"
        ],
        "operationId": "readSingleItemsSignSymptomwithExample",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsSignSymptomwithExample"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/state_domain_behaviour": {
      "get": {
        "summary": "List Items",
        "description": "List the state_domain_behaviour items.",
        "tags": [
          "Items",
          "ItemsStateDomainBehaviour"
        ],
        "operationId": "readItemsStateDomainBehaviour",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsStateDomainBehaviour"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/state_domain_behaviour/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single state_domain_behaviour item by unique identifier.",
        "tags": [
          "Items",
          "ItemsStateDomainBehaviour"
        ],
        "operationId": "readSingleItemsStateDomainBehaviour",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsStateDomainBehaviour"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/task": {
      "get": {
        "summary": "List Items",
        "description": "List the task items.",
        "tags": [
          "Items",
          "ItemsTask"
        ],
        "operationId": "readItemsTask",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsTask"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/task/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single task item by unique identifier.",
        "tags": [
          "Items",
          "ItemsTask"
        ],
        "operationId": "readSingleItemsTask",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsTask"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/technology": {
      "get": {
        "summary": "List Items",
        "description": "List the technology items.",
        "tags": [
          "Items",
          "ItemsTechnology"
        ],
        "operationId": "readItemsTechnology",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsTechnology"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/technology/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single technology item by unique identifier.",
        "tags": [
          "Items",
          "ItemsTechnology"
        ],
        "operationId": "readSingleItemsTechnology",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsTechnology"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    },
    "/items/technology_research_evidence": {
      "get": {
        "summary": "List Items",
        "description": "List the technology_research_evidence items.",
        "tags": [
          "Items",
          "ItemsTechnologyResearchEvidence"
        ],
        "operationId": "readItemsTechnologyResearchEvidence",
        "security": [
          {
            "Auth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Limit"
          },
          {
            "$ref": "#/components/parameters/Meta"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Sort"
          },
          {
            "$ref": "#/components/parameters/Filter"
          },
          {
            "$ref": "#/components/parameters/Search"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/components/schemas/ItemsTechnologyResearchEvidence"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/items/technology_research_evidence/{id}": {
      "get": {
        "summary": "Retrieve an Item",
        "description": "Retrieve a single technology_research_evidence item by unique identifier.",
        "tags": [
          "Items",
          "ItemsTechnologyResearchEvidence"
        ],
        "operationId": "readSingleItemsTechnologyResearchEvidence",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Meta"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "items": {
                        "$ref": "#/components/schemas/ItemsTechnologyResearchEvidence"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ItemsAccommodation": {
        "type": "object",
        "properties": {
          "accommodation_id": {
            "nullable": false,
            "type": "integer"
          },
          "name": {
            "nullable": false,
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          }
        },
        "x-collection": "accommodation"
      },
      "ItemsAccommodationResearchEvidence": {
        "type": "object",
        "properties": {
          "accommodation_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsAccommodation"
              }
            ]
          },
          "research_evidence_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsResearchEvidence"
              }
            ]
          },
          "accommodation_research_evidence_id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          }
        },
        "x-collection": "accommodation_research_evidence"
      },
      "ItemsAlias": {
        "type": "object",
        "properties": {
          "alias_id": {
            "nullable": false,
            "type": "integer"
          },
          "task_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsTask"
              }
            ]
          },
          "name": {
            "nullable": false,
            "type": "string"
          }
        },
        "x-collection": "alias"
      },
      "ItemsAssessmentReference": {
        "type": "object",
        "properties": {
          "assessment_reference_id": {
            "nullable": false,
            "type": "integer"
          },
          "title": {
            "nullable": false,
            "type": "string"
          },
          "link": {
            "nullable": true,
            "type": "string"
          },
          "pub_med_id": {
            "nullable": true,
            "type": "integer"
          }
        },
        "x-collection": "assessment_reference"
      },
      "ItemsAssessmentReferenceAuthor": {
        "type": "object",
        "properties": {
          "assessment_reference_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsAssessmentReference"
              }
            ]
          },
          "author_first_initial": {
            "nullable": false,
            "type": "string"
          },
          "author_middle_initial": {
            "nullable": false,
            "type": "string"
          },
          "author_surname": {
            "nullable": false,
            "type": "string"
          },
          "rank": {
            "nullable": true,
            "type": "integer"
          },
          "assessment_reference_author_id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          }
        },
        "x-collection": "assessment_reference_author"
      },
      "ItemsAuthor": {
        "type": "object",
        "properties": {
          "first_initial": {
            "nullable": false,
            "type": "string"
          },
          "middle_initial": {
            "nullable": false,
            "type": "string"
          },
          "surname": {
            "nullable": false,
            "type": "string"
          },
          "author_id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          }
        },
        "x-collection": "author"
      },
      "ItemsBehaviourAccommodation": {
        "type": "object",
        "properties": {
          "accommodation_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsAccommodation"
              }
            ]
          },
          "behaviour_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsStateDomainBehaviour"
              }
            ]
          },
          "behaviour_accommodation_id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          }
        },
        "x-collection": "behaviour_accommodation"
      },
      "ItemsBehaviourGuide": {
        "type": "object",
        "properties": {
          "guide_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsGuide"
              }
            ]
          },
          "behaviour_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsStateDomainBehaviour"
              }
            ]
          },
          "behaviour_guide_id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          }
        },
        "x-collection": "behaviour_guide"
      },
      "ItemsBehaviourIntervention": {
        "type": "object",
        "properties": {
          "intervention_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsIntervention"
              }
            ]
          },
          "behaviour_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsStateDomainBehaviour"
              }
            ]
          },
          "behaviour_intervention_id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          }
        },
        "x-collection": "behaviour_intervention"
      },
      "ItemsBehaviourQuestionnaire": {
        "type": "object",
        "properties": {
          "questionnaire_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsQuestionnaire"
              }
            ]
          },
          "behaviour_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsStateDomainBehaviour"
              }
            ]
          },
          "behaviour_questionnaire_id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          }
        },
        "x-collection": "behaviour_questionnaire"
      },
      "ItemsBehaviourTechnology": {
        "type": "object",
        "properties": {
          "technology_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsTechnology"
              }
            ]
          },
          "behaviour_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsStateDomainBehaviour"
              }
            ]
          },
          "behaviour_technology_id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          }
        },
        "x-collection": "behaviour_technology"
      },
      "Activity": {
        "type": "object",
        "x-collection": "directus_activity",
        "properties": {
          "id": {
            "description": "Unique identifier for the object.",
            "example": 2,
            "type": "integer"
          },
          "action": {
            "description": "Action that was performed.",
            "example": "update",
            "type": "string",
            "enum": [
              "create",
              "update",
              "delete",
              "authenticate"
            ]
          },
          "user": {
            "description": "The user who performed this action.",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ],
            "nullable": true
          },
          "timestamp": {
            "description": "When the action happened.",
            "example": "2019-12-05T22:52:09Z",
            "type": "string",
            "format": "date-time"
          },
          "ip": {
            "description": "The IP address of the user at the time the action took place.",
            "example": "127.0.0.1",
            "oneOf": [
              {
                "type": "string",
                "format": "ipv4"
              }
            ]
          },
          "user_agent": {
            "description": "User agent string of the browser the user used when the action took place.",
            "example": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_1) AppleWebKit/537.36 (KHTML,like Gecko) Chrome/78.0.3904.108 Safari/537.36",
            "type": "string"
          },
          "collection": {
            "description": "Collection identifier in which the item resides.",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Collections"
              }
            ]
          },
          "item": {
            "description": "Unique identifier for the item the action applied to. This is always a string, even for integer primary keys.",
            "example": "328",
            "type": "string"
          },
          "comment": {
            "description": "User comment. This will store the comments that show up in the right sidebar of the item edit page in the admin app.",
            "example": null,
            "type": "string",
            "nullable": true
          },
          "revisions": {}
        }
      },
      "Collections": {
        "type": "object",
        "x-collection": "directus_collections",
        "properties": {
          "collection": {
            "description": "The collection key.",
            "example": "customers",
            "type": "string"
          },
          "icon": {
            "nullable": true,
            "type": "string"
          },
          "note": {
            "nullable": true,
            "type": "string"
          },
          "display_template": {
            "nullable": true,
            "type": "string"
          },
          "hidden": {
            "nullable": false,
            "type": "boolean"
          },
          "singleton": {
            "nullable": false,
            "type": "boolean"
          },
          "translations": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "archive_field": {
            "nullable": true,
            "type": "string"
          },
          "archive_app_filter": {
            "nullable": false,
            "type": "boolean"
          },
          "archive_value": {
            "nullable": true,
            "type": "string"
          },
          "unarchive_value": {
            "nullable": true,
            "type": "string"
          },
          "sort_field": {
            "nullable": true,
            "type": "string"
          },
          "accountability": {
            "nullable": true,
            "type": "string"
          },
          "color": {
            "nullable": true,
            "type": "string"
          },
          "item_duplication_fields": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "collection_divider": {},
          "archive_divider": {},
          "sort_divider": {},
          "accountability_divider": {},
          "duplication_divider": {}
        }
      },
      "Fields": {
        "type": "object",
        "x-collection": "directus_fields",
        "properties": {
          "id": {
            "nullable": false,
            "type": "integer"
          },
          "collection": {
            "description": "Unique name of the collection this field is in.",
            "example": "about_us",
            "type": "string"
          },
          "field": {
            "description": "Unique name of the field. Field name is unique within the collection.",
            "example": "id",
            "type": "string"
          },
          "special": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "interface": {
            "nullable": true,
            "type": "string"
          },
          "options": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "display": {
            "nullable": true,
            "type": "string"
          },
          "display_options": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "readonly": {
            "nullable": false,
            "type": "boolean"
          },
          "hidden": {
            "nullable": false,
            "type": "boolean"
          },
          "sort": {
            "nullable": true,
            "type": "integer"
          },
          "width": {
            "nullable": true,
            "type": "string"
          },
          "group": {
            "nullable": true,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/Fields"
              }
            ]
          },
          "translations": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "note": {
            "nullable": true,
            "type": "string"
          }
        }
      },
      "Files": {
        "type": "object",
        "x-collection": "directus_files",
        "properties": {
          "id": {
            "description": "Unique identifier for the file.",
            "example": "8cbb43fe-4cdf-4991-8352-c461779cec02",
            "type": "string"
          },
          "storage": {
            "description": "Where the file is stored. Either `local` for the local filesystem or the name of the storage adapter (for example `s3`).",
            "example": "local",
            "type": "string"
          },
          "filename_disk": {
            "description": "Name of the file on disk. By default, Directus uses a random hash for the filename.",
            "example": "a88c3b72-ac58-5436-a4ec-b2858531333a.jpg",
            "type": "string"
          },
          "filename_download": {
            "description": "How you want to the file to be named when it's being downloaded.",
            "example": "avatar.jpg",
            "type": "string"
          },
          "title": {
            "description": "Title for the file. Is extracted from the filename on upload, but can be edited by the user.",
            "example": "User Avatar",
            "type": "string"
          },
          "type": {
            "description": "MIME type of the file.",
            "example": "image/jpeg",
            "type": "string"
          },
          "folder": {
            "description": "Virtual folder where this file resides in.",
            "example": null,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Folders"
              }
            ],
            "nullable": true
          },
          "uploaded_by": {
            "description": "Who uploaded the file.",
            "example": "63716273-0f29-4648-8a2a-2af2948f6f78",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "uploaded_on": {
            "description": "When the file was uploaded.",
            "example": "2019-12-03T00:10:15+00:00",
            "type": "string",
            "format": "date-time"
          },
          "modified_by": {
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "modified_on": {
            "nullable": false,
            "type": "string",
            "format": "timestamp"
          },
          "charset": {
            "description": "Character set of the file.",
            "example": "binary",
            "type": "string",
            "nullable": true
          },
          "filesize": {
            "description": "Size of the file in bytes.",
            "example": 137862,
            "type": "integer"
          },
          "width": {
            "description": "Width of the file in pixels. Only applies to images.",
            "example": 800,
            "type": "integer",
            "nullable": true
          },
          "height": {
            "description": "Height of the file in pixels. Only applies to images.",
            "example": 838,
            "type": "integer",
            "nullable": true
          },
          "duration": {
            "description": "Duration of the file in seconds. Only applies to audio and video.",
            "example": 0,
            "type": "integer",
            "nullable": true
          },
          "embed": {
            "description": "Where the file was embedded from.",
            "example": null,
            "type": "string",
            "nullable": true
          },
          "description": {
            "description": "Description for the file.",
            "type": "string",
            "nullable": true
          },
          "location": {
            "description": "Where the file was created. Is automatically populated based on EXIF data for images.",
            "type": "string",
            "nullable": true
          },
          "tags": {
            "description": "Tags for the file. Is automatically populated based on EXIF data for images.",
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "metadata": {
            "description": "IPTC, EXIF, and ICC metadata extracted from file",
            "type": "object",
            "nullable": true
          },
          "storage_divider": {}
        }
      },
      "Folders": {
        "type": "object",
        "x-collection": "directus_files",
        "properties": {
          "id": {
            "description": "Unique identifier for the folder.",
            "example": "0cf0e03d-4364-45df-b77b-ca61f61869d2",
            "type": "string"
          },
          "name": {
            "description": "Name of the folder.",
            "example": "New York",
            "type": "string"
          },
          "parent": {
            "description": "Unique identifier of the parent folder. This allows for nested folders.",
            "example": null,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Folders"
              }
            ],
            "nullable": true
          }
        }
      },
      "Permissions": {
        "type": "object",
        "x-collection": "directus_permissions",
        "properties": {
          "id": {
            "description": "Unique identifier for the permission.",
            "example": 1,
            "type": "integer"
          },
          "role": {
            "description": "Unique identifier of the role this permission applies to.",
            "example": "2f24211d-d928-469a-aea3-3c8f53d4e426",
            "type": "string",
            "nullable": true
          },
          "collection": {
            "description": "What collection this permission applies to.",
            "example": "customers",
            "type": "string"
          },
          "action": {
            "description": "What action this permission applies to.",
            "example": "create",
            "type": "string",
            "enum": [
              "create",
              "read",
              "update",
              "delete"
            ]
          },
          "permissions": {
            "description": "JSON structure containing the permissions checks for this permission.",
            "type": "object",
            "nullable": true
          },
          "validation": {
            "description": "JSON structure containing the validation checks for this permission.",
            "type": "object",
            "nullable": true
          },
          "presets": {
            "description": "JSON structure containing the preset value for created/updated items.",
            "type": "object",
            "nullable": true
          },
          "fields": {
            "description": "CSV of fields that the user is allowed to interact with.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "limit": {
            "description": "Maximum amount of items the user can interact with at a time.",
            "type": "number",
            "nullable": true
          }
        }
      },
      "Presets": {
        "type": "object",
        "x-collection": "directus_presets",
        "properties": {
          "id": {
            "description": "Unique identifier for this single collection preset.",
            "example": 155,
            "type": "integer"
          },
          "bookmark": {
            "description": "Name for the bookmark. If this is set, the preset will be considered a bookmark.",
            "nullable": true,
            "type": "string"
          },
          "user": {
            "description": "The unique identifier of the user to whom this collection preset applies.",
            "example": "63716273-0f29-4648-8a2a-2af2948f6f78",
            "nullable": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Users"
              }
            ]
          },
          "role": {
            "description": "The unique identifier of a role in the platform. If `user` is null, this will be used to apply the collection preset or bookmark for all users in the role.",
            "example": "50419801-0f30-8644-2b3c-9bc2d980d0a0",
            "nullable": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Roles"
              }
            ]
          },
          "collection": {
            "description": "What collection this collection preset is used for.",
            "example": "articles",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Collections"
              }
            ]
          },
          "search": {
            "description": "Search query.",
            "type": "string",
            "nullable": true
          },
          "filters": {
            "description": "The filters that the user applied.",
            "example": [
              {
                "key": "7RwVrquB5dPmfbrI1rcWy",
                "field": "title",
                "operator": "contains",
                "value": "Hello"
              }
            ],
            "type": "array",
            "nullable": true,
            "items": {
              "type": "object"
            }
          },
          "layout": {
            "description": "Key of the layout that is used.",
            "type": "string",
            "example": null
          },
          "layout_query": {
            "description": "Layout query that's saved per layout type. Controls what data is fetched on load. These follow the same format as the JS SDK parameters.",
            "example": {
              "cards": {
                "sort": "-published_on"
              }
            },
            "nullable": true
          },
          "layout_options": {
            "description": "Options of the views. The properties in here are controlled by the layout.",
            "example": {
              "cards": {
                "icon": "account_circle",
                "title": "{{ first_name }} {{ last_name }}",
                "subtitle": "{{ title }}",
                "size": 3
              }
            },
            "nullable": true
          },
          "refresh_interval": {
            "nullable": true,
            "type": "integer"
          }
        }
      },
      "Relations": {
        "type": "object",
        "x-collection": "directus_relations",
        "properties": {
          "id": {
            "description": "Unique identifier for the relation.",
            "example": 1,
            "type": "integer"
          },
          "many_collection": {
            "description": "Collection that has the field that holds the foreign key.",
            "example": "directus_activity",
            "type": "string"
          },
          "many_field": {
            "description": "Foreign key. Field that holds the primary key of the related collection.",
            "example": "user",
            "type": "string"
          },
          "one_collection": {
            "description": "Collection on the _one_ side of the relationship.",
            "example": "directus_users",
            "type": "string"
          },
          "one_field": {
            "description": "Alias column that serves as the _one_ side of the relationship.",
            "example": null,
            "type": "string",
            "nullable": true
          },
          "one_collection_field": {
            "nullable": true,
            "type": "string"
          },
          "one_allowed_collections": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "junction_field": {
            "description": "Field on the junction table that holds the many field of the related relation.",
            "example": null,
            "type": "string",
            "nullable": true
          },
          "sort_field": {
            "nullable": true,
            "type": "string"
          },
          "one_deselect_action": {
            "nullable": false,
            "type": "string"
          }
        }
      },
      "Roles": {
        "type": "object",
        "x-collection": "directus_roles",
        "properties": {
          "id": {
            "description": "Unique identifier for the role.",
            "example": "2f24211d-d928-469a-aea3-3c8f53d4e426",
            "type": "string"
          },
          "name": {
            "description": "Name of the role.",
            "example": "Administrator",
            "type": "string"
          },
          "icon": {
            "description": "The role's icon.",
            "example": "verified_user",
            "type": "string"
          },
          "description": {
            "description": "Description of the role.",
            "example": "Admins have access to all managed data within the system by default",
            "type": "string",
            "nullable": true
          },
          "ip_access": {
            "description": "Array of IP addresses that are allowed to connect to the API as a user of this role.",
            "example": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "enforce_tfa": {
            "description": "Whether or not this role enforces the use of 2FA.",
            "example": false,
            "type": "boolean"
          },
          "module_list": {
            "description": "Custom override for the admin app module bar navigation.",
            "example": null,
            "type": "array",
            "items": {
              "type": "object"
            },
            "nullable": true
          },
          "collection_list": {
            "description": "Custom override for the admin app collection navigation.",
            "example": null,
            "type": "object",
            "nullable": true
          },
          "admin_access": {
            "description": "Admin role. If true, skips all permission checks.",
            "example": false,
            "type": "boolean"
          },
          "app_access": {
            "description": "The users in the role are allowed to use the app.",
            "example": true,
            "type": "boolean"
          },
          "users": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "$ref": "#/components/schemas/Users"
                }
              ]
            }
          }
        }
      },
      "Settings": {
        "type": "object",
        "x-collection": "directus_settings",
        "properties": {
          "id": {
            "description": "Unique identifier for the setting.",
            "type": "integer",
            "example": 1
          },
          "project_name": {
            "description": "The name of the project.",
            "type": "string",
            "example": "Directus"
          },
          "project_url": {
            "description": "The url of the project.",
            "type": "string",
            "example": null,
            "nullable": true
          },
          "project_color": {
            "description": "The brand color of the project.",
            "type": "string",
            "example": null,
            "nullable": true
          },
          "project_logo": {
            "description": "The logo of the project.",
            "type": "string",
            "example": null,
            "nullable": true
          },
          "public_foreground": {
            "description": "The foreground of the project.",
            "type": "string",
            "example": null,
            "nullable": true
          },
          "public_background": {
            "description": "The background of the project.",
            "type": "string",
            "example": null,
            "nullable": true
          },
          "public_note": {
            "description": "Note rendered on the public pages of the app.",
            "type": "string",
            "example": null,
            "nullable": true
          },
          "auth_login_attempts": {
            "description": "Allowed authentication login attempts before the user's status is set to blocked.",
            "type": "integer",
            "example": 25
          },
          "auth_password_policy": {
            "description": "Authentication password policy.",
            "type": "string",
            "nullable": true
          },
          "storage_asset_transform": {
            "description": "What transformations are allowed in the assets endpoint.",
            "type": "string",
            "enum": [
              "all",
              "none",
              "presets"
            ],
            "example": "all",
            "nullable": true
          },
          "storage_asset_presets": {
            "description": "Array of allowed",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "description": "Key for the asset. Used in the assets endpoint.",
                  "type": "string"
                },
                "fit": {
                  "description": "Whether to crop the thumbnail to match the size, or maintain the aspect ratio.",
                  "type": "string",
                  "enum": [
                    "cover",
                    "contain",
                    "inside",
                    "outside"
                  ]
                },
                "width": {
                  "description": "Width of the thumbnail.",
                  "type": "integer"
                },
                "height": {
                  "description": "Height of the thumbnail.",
                  "type": "integer"
                },
                "withoutEnlargement": {
                  "description": "No image upscale",
                  "type": "boolean"
                },
                "quality": {
                  "description": "Quality of the compression used.",
                  "type": "integer"
                }
              }
            },
            "example": null,
            "nullable": true
          },
          "custom_css": {
            "nullable": true,
            "type": "string"
          },
          "public_divider": {},
          "security_divider": {},
          "files_divider": {},
          "overrides_divider": {}
        }
      },
      "Users": {
        "type": "object",
        "x-collection": "directus_users",
        "properties": {
          "id": {
            "description": "Unique identifier for the user.",
            "example": "63716273-0f29-4648-8a2a-2af2948f6f78",
            "type": "string"
          },
          "first_name": {
            "description": "First name of the user.",
            "example": "Admin",
            "type": "string"
          },
          "last_name": {
            "description": "Last name of the user.",
            "example": "User",
            "type": "string"
          },
          "email": {
            "description": "Unique email address for the user.",
            "example": "admin@example.com",
            "type": "string",
            "format": "email"
          },
          "password": {
            "description": "Password of the user.",
            "type": "string"
          },
          "location": {
            "description": "The user's location.",
            "example": null,
            "type": "string",
            "nullable": true
          },
          "title": {
            "description": "The user's title.",
            "example": null,
            "type": "string",
            "nullable": true
          },
          "description": {
            "description": "The user's description.",
            "example": null,
            "type": "string",
            "nullable": true
          },
          "tags": {
            "description": "The user's tags.",
            "example": null,
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "avatar": {
            "description": "The user's avatar.",
            "example": null,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Files"
              }
            ],
            "nullable": true
          },
          "language": {
            "description": "The user's language used in Directus.",
            "example": "en-US",
            "type": "string"
          },
          "theme": {
            "description": "What theme the user is using.",
            "example": "auto",
            "type": "string",
            "enum": [
              "light",
              "dark",
              "auto"
            ]
          },
          "tfa_secret": {
            "description": "The 2FA secret string that's used to generate one time passwords.",
            "example": null,
            "type": "string",
            "nullable": true
          },
          "status": {
            "description": "Status of the user.",
            "example": "active",
            "type": "string",
            "enum": [
              "active",
              "invited",
              "draft",
              "suspended",
              "deleted"
            ]
          },
          "role": {
            "description": "Unique identifier of the role of this user.",
            "example": "2f24211d-d928-469a-aea3-3c8f53d4e426",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/Roles"
              }
            ]
          },
          "token": {
            "description": "Static token for the user.",
            "type": "string",
            "nullable": true
          },
          "last_access": {
            "nullable": true,
            "type": "string",
            "format": "timestamp"
          },
          "last_page": {
            "description": "Last page that the user was on.",
            "example": "/my-project/settings/collections/a",
            "type": "string",
            "nullable": true
          },
          "preferences_divider": {},
          "admin_divider": {}
        }
      },
      "ItemsDisorder": {
        "type": "object",
        "properties": {
          "disorder_id": {
            "nullable": false,
            "type": "integer"
          },
          "name": {
            "nullable": false,
            "type": "string"
          },
          "disorder_category_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsDisorderCategory"
              }
            ]
          },
          "disorder_subcategory_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsDisorderSubcategory"
              }
            ]
          },
          "icd_9_cm": {
            "nullable": true,
            "type": "string"
          },
          "icd_10_cm": {
            "nullable": true,
            "type": "string"
          }
        },
        "x-collection": "disorder"
      },
      "ItemsDisorderAccommodation": {
        "type": "object",
        "properties": {
          "accommodation_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsAccommodation"
              }
            ]
          },
          "disorder_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsDisorder"
              }
            ]
          },
          "disorder_accommodation_id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          }
        },
        "x-collection": "disorder_accommodation"
      },
      "ItemsDisorderCategory": {
        "type": "object",
        "properties": {
          "disorder_category_id": {
            "nullable": false,
            "type": "integer"
          },
          "name": {
            "nullable": false,
            "type": "string"
          }
        },
        "x-collection": "disorder_category"
      },
      "ItemsDisorderCategoryAccommodation": {
        "type": "object",
        "properties": {
          "accommodation_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsAccommodation"
              }
            ]
          },
          "disorder_category_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsDisorderCategory"
              }
            ]
          },
          "disorder_category_accommodation_id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          }
        },
        "x-collection": "disorder_category_accommodation"
      },
      "ItemsDisorderCategoryIntervention": {
        "type": "object",
        "properties": {
          "intervention_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsIntervention"
              }
            ]
          },
          "disorder_category_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsDisorderCategory"
              }
            ]
          },
          "disorder_category_intervention_id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          }
        },
        "x-collection": "disorder_category_intervention"
      },
      "ItemsDisorderCategoryTechnology": {
        "type": "object",
        "properties": {
          "technology_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsTechnology"
              }
            ]
          },
          "disorder_category_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsDisorderCategory"
              }
            ]
          },
          "disorder_category_technology_id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          }
        },
        "x-collection": "disorder_category_technology"
      },
      "ItemsDisorderIntervention": {
        "type": "object",
        "properties": {
          "intervention_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsIntervention"
              }
            ]
          },
          "disorder_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsDisorder"
              }
            ]
          },
          "disorder_intervention_id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          }
        },
        "x-collection": "disorder_intervention"
      },
      "ItemsDisorderReference": {
        "type": "object",
        "properties": {
          "disorder_reference_id": {
            "nullable": false,
            "type": "integer"
          },
          "title": {
            "nullable": false,
            "type": "string"
          }
        },
        "x-collection": "disorder_reference"
      },
      "ItemsDisorderReferenceAuthor": {
        "type": "object",
        "properties": {
          "disorder_reference_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsDisorderReference"
              }
            ]
          },
          "author_first_initial": {
            "nullable": false,
            "type": "string"
          },
          "author_middle_initial": {
            "nullable": false,
            "type": "string"
          },
          "author_surname": {
            "nullable": false,
            "type": "string"
          },
          "rank": {
            "nullable": true,
            "type": "integer"
          },
          "disorder_reference_author_id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          }
        },
        "x-collection": "disorder_reference_author"
      },
      "ItemsDisorderSignSymptom": {
        "type": "object",
        "properties": {
          "disorder_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsDisorder"
              }
            ]
          },
          "sign_symptom_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsSignSymptom"
              }
            ]
          },
          "disorder_sign_symptom_id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          }
        },
        "x-collection": "disorder_sign_symptom"
      },
      "ItemsDisorderSubcategory": {
        "type": "object",
        "properties": {
          "disorder_subcategory_id": {
            "nullable": false,
            "type": "integer"
          },
          "name": {
            "nullable": false,
            "type": "string"
          }
        },
        "x-collection": "disorder_subcategory"
      },
      "ItemsDisorderTechnology": {
        "type": "object",
        "properties": {
          "technology_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsTechnology"
              }
            ]
          },
          "disorder_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsDisorder"
              }
            ]
          },
          "disorder_technology_id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          }
        },
        "x-collection": "disorder_technology"
      },
      "ItemsGuide": {
        "type": "object",
        "properties": {
          "guide_id": {
            "nullable": false,
            "type": "integer"
          },
          "title": {
            "nullable": false,
            "type": "string"
          },
          "link": {
            "nullable": false,
            "type": "string"
          },
          "publisher": {
            "nullable": false,
            "type": "string"
          },
          "guide_reference_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsGuideReference"
              }
            ]
          }
        },
        "x-collection": "guide"
      },
      "ItemsGuideAccommodation": {
        "type": "object",
        "properties": {
          "accommodation_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsAccommodation"
              }
            ]
          },
          "guide_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsGuide"
              }
            ]
          },
          "guide_accommodation_id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          }
        },
        "x-collection": "guide_accommodation"
      },
      "ItemsGuideAudience": {
        "type": "object",
        "properties": {
          "audience_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsResourcePeopleAudience"
              }
            ]
          },
          "guide_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsGuide"
              }
            ]
          },
          "guide_audience_id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          }
        },
        "x-collection": "guide_audience"
      },
      "ItemsGuideAuthor": {
        "type": "object",
        "properties": {
          "author_first_initial": {
            "nullable": false,
            "type": "string"
          },
          "author_middle_initial": {
            "nullable": false,
            "type": "string"
          },
          "author_surname": {
            "nullable": false,
            "type": "string"
          },
          "guide_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsGuide"
              }
            ]
          },
          "rank": {
            "nullable": true,
            "type": "integer"
          },
          "guide_author_id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          }
        },
        "x-collection": "guide_author"
      },
      "ItemsGuideDisorder": {
        "type": "object",
        "properties": {
          "disorder_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsDisorder"
              }
            ]
          },
          "guide_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsGuide"
              }
            ]
          },
          "guide_disorder_id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          }
        },
        "x-collection": "guide_disorder"
      },
      "ItemsGuideDisorderCategory": {
        "type": "object",
        "properties": {
          "disorder_category_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsDisorderCategory"
              }
            ]
          },
          "guide_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsGuide"
              }
            ]
          },
          "guide_disorder_category_id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          }
        },
        "x-collection": "guide_disorder_category"
      },
      "ItemsGuideGuideType": {
        "type": "object",
        "properties": {
          "guide_type_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsGuideType"
              }
            ]
          },
          "guide_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsGuide"
              }
            ]
          },
          "guide_guide_type_id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          }
        },
        "x-collection": "guide_guide_type"
      },
      "ItemsGuideIntervention": {
        "type": "object",
        "properties": {
          "intervention_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsIntervention"
              }
            ]
          },
          "guide_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsGuide"
              }
            ]
          },
          "guide_intervention_id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          }
        },
        "x-collection": "guide_intervention"
      },
      "ItemsGuideReference": {
        "type": "object",
        "properties": {
          "guide_reference_id": {
            "nullable": false,
            "type": "integer"
          },
          "title": {
            "nullable": true,
            "type": "string"
          },
          "link": {
            "nullable": true,
            "type": "string"
          },
          "pub_med_id": {
            "nullable": true,
            "type": "integer"
          }
        },
        "x-collection": "guide_reference"
      },
      "ItemsGuideTechnology": {
        "type": "object",
        "properties": {
          "technology_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsTechnology"
              }
            ]
          },
          "guide_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsGuide"
              }
            ]
          },
          "guide_technology_id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          }
        },
        "x-collection": "guide_technology"
      },
      "ItemsGuideType": {
        "type": "object",
        "properties": {
          "guide_type_id": {
            "nullable": false,
            "type": "integer"
          },
          "name": {
            "nullable": false,
            "type": "string"
          }
        },
        "x-collection": "guide_type"
      },
      "ItemsIntervention": {
        "type": "object",
        "properties": {
          "intervention_id": {
            "nullable": false,
            "type": "integer"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          }
        },
        "x-collection": "intervention"
      },
      "ItemsInterventionResearchEvidence": {
        "type": "object",
        "properties": {
          "intervention_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsIntervention"
              }
            ]
          },
          "research_evidence_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsResearchEvidence"
              }
            ]
          },
          "intervention_research_evidence_id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          }
        },
        "x-collection": "intervention_research_evidence"
      },
      "ItemsLanguageSource": {
        "type": "object",
        "properties": {
          "language_source_id": {
            "nullable": false,
            "type": "integer"
          },
          "name": {
            "nullable": false,
            "type": "string"
          }
        },
        "x-collection": "language_source"
      },
      "ItemsLisaAuthor": {
        "type": "object",
        "properties": {
          "lisa_author_id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "lisa_author_first_name": {
            "nullable": false,
            "type": "string"
          },
          "lisa_author_last_name": {
            "nullable": false,
            "type": "string"
          }
        },
        "x-collection": "lisa_author"
      },
      "ItemsLisaDomain": {
        "type": "object",
        "properties": {
          "domain_id": {
            "nullable": false,
            "type": "string"
          },
          "domain_category_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemsLisaDomainCategory"
              }
            ]
          }
        },
        "x-collection": "lisa_domain"
      },
      "ItemsLisaDomainCategory": {
        "type": "object",
        "properties": {
          "domain_category_id": {
            "nullable": false,
            "type": "string"
          }
        },
        "x-collection": "lisa_domain_category"
      },
      "ItemsLisaDomainCategoryLocale": {
        "type": "object",
        "properties": {
          "domain_category_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemsLisaDomainCategory"
              }
            ]
          },
          "locale_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemsLocale"
              }
            ]
          },
          "lisa_domain_category_locale_id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          }
        },
        "x-collection": "lisa_domain_category_locale"
      },
      "ItemsLisaDomainCategoryLocaleAuthor": {
        "type": "object",
        "properties": {
          "lisa_domain_category_locale_author_id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "domain_category_id": {
            "nullable": false,
            "type": "string"
          },
          "locale_id": {
            "nullable": false,
            "type": "string"
          },
          "lisa_author_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsLisaAuthor"
              }
            ]
          },
          "rank": {
            "nullable": true,
            "type": "integer"
          }
        },
        "x-collection": "lisa_domain_category_locale_author"
      },
      "ItemsLisaDomainCategoryLocaleVersion": {
        "type": "object",
        "properties": {
          "lisa_domain_category_locale_version_id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "domain_category_id": {
            "nullable": false,
            "type": "string"
          },
          "locale_id": {
            "nullable": false,
            "type": "string"
          },
          "created_at": {
            "nullable": false,
            "type": "string",
            "format": "timestamp"
          },
          "name": {
            "nullable": false,
            "type": "string"
          },
          "content_markdown": {
            "nullable": false,
            "type": "string"
          },
          "created_by": {
            "nullable": false,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsLisaAuthor"
              }
            ]
          }
        },
        "x-collection": "lisa_domain_category_locale_version"
      },
      "ItemsLisaDomainGuide": {
        "type": "object",
        "properties": {
          "domain_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemsLisaDomain"
              }
            ]
          },
          "lisa_guide_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemsLisaGuide"
              }
            ]
          },
          "lisa_domain_guide_id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          }
        },
        "x-collection": "lisa_domain_guide"
      },
      "ItemsLisaDomainGuideLocale": {
        "type": "object",
        "properties": {
          "locale_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemsLocale"
              }
            ]
          },
          "lisa_domain_guide_locale_id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "lisa_guide_id": {
            "nullable": false,
            "type": "string"
          },
          "domain_id": {
            "nullable": false,
            "type": "string"
          }
        },
        "x-collection": "lisa_domain_guide_locale"
      },
      "ItemsLisaDomainLocale": {
        "type": "object",
        "properties": {
          "domain_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemsLisaDomain"
              }
            ]
          },
          "locale_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemsLocale"
              }
            ]
          },
          "lisa_domain_locale_id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          }
        },
        "x-collection": "lisa_domain_locale"
      },
      "ItemsLisaDomainLocaleAuthor": {
        "type": "object",
        "properties": {
          "lisa_domain_locale_author_id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "domain_id": {
            "nullable": false,
            "type": "string"
          },
          "locale_id": {
            "nullable": false,
            "type": "string"
          },
          "lisa_author_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsLisaAuthor"
              }
            ]
          },
          "rank": {
            "nullable": true,
            "type": "integer"
          }
        },
        "x-collection": "lisa_domain_locale_author"
      },
      "ItemsLisaDomainLocaleVersion": {
        "type": "object",
        "properties": {
          "lisa_domain_locale_version_id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "domain_id": {
            "nullable": false,
            "type": "string"
          },
          "locale_id": {
            "nullable": false,
            "type": "string"
          },
          "created_at": {
            "nullable": false,
            "type": "string",
            "format": "timestamp"
          },
          "name": {
            "nullable": false,
            "type": "string"
          },
          "content_markdown": {
            "nullable": false,
            "type": "string"
          },
          "created_by": {
            "nullable": false,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsLisaAuthor"
              }
            ]
          }
        },
        "x-collection": "lisa_domain_locale_version"
      },
      "ItemsLisaGuide": {
        "type": "object",
        "properties": {
          "lisa_guide_id": {
            "nullable": false,
            "type": "string"
          }
        },
        "x-collection": "lisa_guide"
      },
      "ItemsLisaGuideLocale": {
        "type": "object",
        "properties": {
          "lisa_guide_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemsLisaGuide"
              }
            ]
          },
          "locale_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemsLocale"
              }
            ]
          },
          "lisa_guide_locale_id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          }
        },
        "x-collection": "lisa_guide_locale"
      },
      "ItemsLisaGuideLocaleAuthor": {
        "type": "object",
        "properties": {
          "lisa_guide_locale_author_id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "lisa_guide_id": {
            "nullable": false,
            "type": "string"
          },
          "locale_id": {
            "nullable": false,
            "type": "string"
          },
          "lisa_author_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsLisaAuthor"
              }
            ]
          },
          "rank": {
            "nullable": true,
            "type": "integer"
          }
        },
        "x-collection": "lisa_guide_locale_author"
      },
      "ItemsLisaGuideLocaleVersion": {
        "type": "object",
        "properties": {
          "lisa_guide_locale_version_id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "lisa_guide_id": {
            "nullable": false,
            "type": "string"
          },
          "locale_id": {
            "nullable": false,
            "type": "string"
          },
          "created_at": {
            "nullable": false,
            "type": "string",
            "format": "timestamp"
          },
          "name": {
            "nullable": false,
            "type": "string"
          },
          "content_markdown": {
            "nullable": false,
            "type": "string"
          },
          "created_by": {
            "nullable": false,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsLisaAuthor"
              }
            ]
          }
        },
        "x-collection": "lisa_guide_locale_version"
      },
      "ItemsLisaStaticContent": {
        "type": "object",
        "properties": {
          "static_content_id": {
            "nullable": false,
            "type": "string"
          }
        },
        "x-collection": "lisa_static_content"
      },
      "ItemsLisaStaticContentLocale": {
        "type": "object",
        "properties": {
          "lisa_static_content_locale_id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "static_content_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemsLisaStaticContent"
              }
            ]
          },
          "locale_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemsLocale"
              }
            ]
          }
        },
        "x-collection": "lisa_static_content_locale"
      },
      "ItemsLisaStaticContentLocaleVersion": {
        "type": "object",
        "properties": {
          "lisa_static_content_locale_version_id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          },
          "static_content_id": {
            "nullable": false,
            "type": "string"
          },
          "locale_id": {
            "nullable": false,
            "type": "string"
          },
          "created_at": {
            "nullable": false,
            "type": "string",
            "format": "timestamp"
          },
          "name": {
            "nullable": false,
            "type": "string"
          },
          "content_markdown": {
            "nullable": false,
            "type": "string"
          },
          "created_by": {
            "nullable": false,
            "oneOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "$ref": "#/components/schemas/ItemsLisaAuthor"
              }
            ]
          }
        },
        "x-collection": "lisa_static_content_locale_version"
      },
      "ItemsLocale": {
        "type": "object",
        "properties": {
          "locale_id": {
            "nullable": false,
            "type": "string"
          },
          "name": {
            "nullable": false,
            "type": "string"
          }
        },
        "x-collection": "locale"
      },
      "ItemsNeutralConstruct": {
        "type": "object",
        "properties": {
          "name": {
            "nullable": false,
            "type": "string"
          }
        },
        "x-collection": "neutral_construct"
      },
      "ItemsQuestion": {
        "type": "object",
        "properties": {
          "question_id": {
            "nullable": false,
            "type": "integer"
          },
          "questionnaire_id": {
            "nullable": true,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsQuestionnaire"
              }
            ]
          },
          "paper_instruction_preamble": {
            "nullable": true,
            "type": "string"
          },
          "digital_instruction_preamble": {
            "nullable": true,
            "type": "string"
          },
          "paper_instruction": {
            "nullable": true,
            "type": "string"
          },
          "digital_instruction": {
            "nullable": true,
            "type": "string"
          },
          "question_context": {
            "nullable": false,
            "type": "string"
          },
          "response_option": {
            "nullable": true,
            "type": "string"
          }
        },
        "x-collection": "question"
      },
      "ItemsQuestionResponseType": {
        "type": "object",
        "properties": {
          "response_type_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsResponseType"
              }
            ]
          },
          "question_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsQuestion"
              }
            ]
          },
          "question_response_type_id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          }
        },
        "x-collection": "question_response_type"
      },
      "ItemsQuestionnaire": {
        "type": "object",
        "properties": {
          "questionnaire_id": {
            "nullable": false,
            "type": "integer"
          },
          "title": {
            "nullable": false,
            "type": "string"
          },
          "link": {
            "nullable": true,
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "abbreviation": {
            "nullable": true,
            "type": "string"
          },
          "age_max": {
            "nullable": true,
            "type": "integer"
          },
          "age_min": {
            "nullable": true,
            "type": "integer"
          },
          "number_of_questions": {
            "nullable": true,
            "type": "integer"
          },
          "minutes_to_complete": {
            "nullable": true,
            "type": "integer"
          },
          "license_id": {
            "nullable": false,
            "type": "integer"
          },
          "language_source_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsLanguageSource"
              }
            ]
          }
        },
        "x-collection": "questionnaire"
      },
      "ItemsQuestionnaireAssessmentReference": {
        "type": "object",
        "properties": {
          "assessment_reference_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsAssessmentReference"
              }
            ]
          },
          "questionnaire_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsQuestionnaire"
              }
            ]
          },
          "questionnaire_assessment_reference_id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          }
        },
        "x-collection": "questionnaire_assessment_reference"
      },
      "ItemsQuestionnaireAuthor": {
        "type": "object",
        "properties": {
          "author_first_initial": {
            "nullable": false,
            "type": "string"
          },
          "author_middle_initial": {
            "nullable": false,
            "type": "string"
          },
          "author_surname": {
            "nullable": false,
            "type": "string"
          },
          "questionnaire_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsQuestionnaire"
              }
            ]
          },
          "rank": {
            "nullable": true,
            "type": "integer"
          },
          "questionnaire_author_id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          }
        },
        "x-collection": "questionnaire_author"
      },
      "ItemsQuestionnaireDisorder": {
        "type": "object",
        "properties": {
          "questionnaire_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsQuestionnaire"
              }
            ]
          },
          "disorder_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsDisorder"
              }
            ]
          },
          "questionnaire_disorder_id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          }
        },
        "x-collection": "questionnaire_disorder"
      },
      "ItemsQuestionnaireDisorderCategory": {
        "type": "object",
        "properties": {
          "questionnaire_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsQuestionnaire"
              }
            ]
          },
          "disorder_category_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsDisorderCategory"
              }
            ]
          },
          "questionnaire_disorder_category_id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          }
        },
        "x-collection": "questionnaire_disorder_category"
      },
      "ItemsQuestionnaireLanguageNotMhdb": {
        "type": "object",
        "properties": {
          "questionnaire_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsQuestionnaire"
              }
            ]
          },
          "language_source_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsLanguageSource"
              }
            ]
          },
          "questionnaire_language_not_mhdb_id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          }
        },
        "x-collection": "questionnaire_language_not_mhdb"
      },
      "ItemsQuestionnaireRespondent": {
        "type": "object",
        "properties": {
          "respondent_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsResourcePeopleAudience"
              }
            ]
          },
          "questionnaire_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsQuestionnaire"
              }
            ]
          },
          "questionnaire_respondent_id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          }
        },
        "x-collection": "questionnaire_respondent"
      },
      "ItemsQuestionnaireSignSymptom": {
        "type": "object",
        "properties": {
          "questionnaire_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsQuestionnaire"
              }
            ]
          },
          "sign_symptom_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsSignSymptom"
              }
            ]
          },
          "questionnaire_sign_symptom_id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          }
        },
        "x-collection": "questionnaire_sign_symptom"
      },
      "ItemsQuestionnaireSubject": {
        "type": "object",
        "properties": {
          "subject_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsResourcePeopleAudience"
              }
            ]
          },
          "questionnaire_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsQuestionnaire"
              }
            ]
          },
          "questionnaire_subject_id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          }
        },
        "x-collection": "questionnaire_subject"
      },
      "ItemsResearchEvidence": {
        "type": "object",
        "properties": {
          "research_evidence_id": {
            "nullable": false,
            "type": "integer"
          },
          "context": {
            "nullable": false,
            "type": "string"
          }
        },
        "x-collection": "research_evidence"
      },
      "ItemsResourcePeopleAudience": {
        "type": "object",
        "properties": {
          "audience_id": {
            "nullable": false,
            "type": "integer"
          },
          "person": {
            "nullable": false,
            "type": "string"
          }
        },
        "x-collection": "resource_people_audience"
      },
      "ItemsResponseType": {
        "type": "object",
        "properties": {
          "response_type_id": {
            "nullable": false,
            "type": "integer"
          },
          "type": {
            "nullable": false,
            "type": "string"
          },
          "response_type_definition": {
            "nullable": false,
            "type": "string"
          }
        },
        "x-collection": "response_type"
      },
      "ItemsSignSymptom": {
        "type": "object",
        "properties": {
          "sign_symptom_id": {
            "nullable": false,
            "type": "integer"
          },
          "name": {
            "nullable": false,
            "type": "string"
          },
          "underlying_behavior": {
            "nullable": true,
            "type": "string"
          },
          "disorder_reference_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsDisorderReference"
              }
            ]
          }
        },
        "x-collection": "sign_symptom"
      },
      "ItemsSignSymptomAccommodation": {
        "type": "object",
        "properties": {
          "accommodation_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsAccommodation"
              }
            ]
          },
          "sign_symptom_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsSignSymptom"
              }
            ]
          },
          "sign_symptom_accommodation_id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          }
        },
        "x-collection": "sign_symptom_accommodation"
      },
      "ItemsSignSymptomExample": {
        "type": "object",
        "properties": {
          "sign_symptom_example_id": {
            "nullable": false,
            "type": "integer"
          },
          "name": {
            "nullable": false,
            "type": "string"
          }
        },
        "x-collection": "sign_symptom_example"
      },
      "ItemsSignSymptomIntervention": {
        "type": "object",
        "properties": {
          "intervention_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsIntervention"
              }
            ]
          },
          "sign_symptom_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsSignSymptom"
              }
            ]
          },
          "sign_symptom_intervention_id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          }
        },
        "x-collection": "sign_symptom_intervention"
      },
      "ItemsSignSymptomNeutralConstruct": {
        "type": "object",
        "properties": {
          "sign_symptom_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsSignSymptom"
              }
            ]
          },
          "name": {
            "nullable": false,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "$ref": "#/components/schemas/ItemsNeutralConstruct"
              }
            ]
          },
          "sign_symptom_neutral_construct_id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          }
        },
        "x-collection": "sign_symptom_neutral_construct"
      },
      "ItemsSignSymptomTechnology": {
        "type": "object",
        "properties": {
          "technology_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsTechnology"
              }
            ]
          },
          "sign_symptom_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsSignSymptom"
              }
            ]
          },
          "sign_symptom_technology_id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          }
        },
        "x-collection": "sign_symptom_technology"
      },
      "ItemsSignSymptomwithExample": {
        "type": "object",
        "properties": {
          "sign_symptom_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsSignSymptom"
              }
            ]
          },
          "sign_symptom_example_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsSignSymptomExample"
              }
            ]
          },
          "sign_symptom_with_example_id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          }
        },
        "x-collection": "sign_symptom_with_example"
      },
      "ItemsStateDomainBehaviour": {
        "type": "object",
        "properties": {
          "behaviour_id": {
            "nullable": false,
            "type": "integer"
          },
          "behaviour": {
            "nullable": false,
            "type": "string"
          }
        },
        "x-collection": "state_domain_behaviour"
      },
      "ItemsTask": {
        "type": "object",
        "properties": {
          "task_id": {
            "nullable": false,
            "type": "integer"
          },
          "name": {
            "nullable": false,
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "assessment_reference_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsAssessmentReference"
              }
            ]
          }
        },
        "x-collection": "task"
      },
      "ItemsTechnology": {
        "type": "object",
        "properties": {
          "technology_id": {
            "nullable": false,
            "type": "integer"
          },
          "name": {
            "nullable": true,
            "type": "string"
          },
          "description": {
            "nullable": true,
            "type": "string"
          },
          "link": {
            "nullable": true,
            "type": "string"
          }
        },
        "x-collection": "technology"
      },
      "ItemsTechnologyResearchEvidence": {
        "type": "object",
        "properties": {
          "technology_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsTechnology"
              }
            ]
          },
          "research_evidence_id": {
            "nullable": false,
            "oneOf": [
              {
                "type": "integer"
              },
              {
                "$ref": "#/components/schemas/ItemsResearchEvidence"
              }
            ]
          },
          "technology_research_evidence_id": {
            "nullable": false,
            "type": "string",
            "format": "uuid"
          }
        },
        "x-collection": "technology_research_evidence"
      }
    },
    "parameters": {
      "Id": {
        "description": "Index",
        "name": "id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "integer"
        }
      },
      "UUId": {
        "description": "Unique identifier for the object.",
        "name": "id",
        "in": "path",
        "required": true,
        "schema": {
          "example": "8cbb43fe-4cdf-4991-8352-c461779cec02",
          "type": "string"
        }
      },
      "Collection": {
        "description": "Collection of which you want to retrieve the items from.",
        "name": "collection",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "Search": {
        "description": "Filter by items that contain the given search query in one of their fields.",
        "in": "query",
        "name": "search",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "Page": {
        "description": "Cursor for use in pagination. Often used in combination with limit.",
        "in": "query",
        "name": "page",
        "required": false,
        "schema": {
          "type": "integer"
        }
      },
      "Offset": {
        "description": "How many items to skip when fetching data.",
        "in": "query",
        "name": "offset",
        "required": false,
        "schema": {
          "type": "integer"
        }
      },
      "Sort": {
        "description": "How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.\n",
        "in": "query",
        "name": "sort",
        "required": false,
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "Meta": {
        "description": "What metadata to return in the response.",
        "in": "query",
        "name": "meta",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "Limit": {
        "description": "A limit on the number of objects that are returned.",
        "in": "query",
        "name": "limit",
        "required": false,
        "schema": {
          "type": "integer"
        }
      },
      "Filter": {
        "description": "Select items in collection by given conditions.",
        "in": "query",
        "name": "filter",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^(\\[[^\\[\\]]*?\\]){1}(\\[(_eq|_neq|_lt|_lte|_gt|_gte|_in|_nin|_null|_nnull|_contains|_ncontains|_between|_nbetween|_empty|_nempty)\\])?=.*?$"
          }
        }
      },
      "Fields": {
        "description": "Control what fields are being returned in the object.",
        "in": "query",
        "name": "fields",
        "required": false,
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "Mode": {
        "description": "Controls if the API sets a cookie or returns a JWT on successful login.",
        "in": "query",
        "name": "mode",
        "required": true,
        "schema": {
          "type": "string",
          "enum": [
            "jwt",
            "cookie"
          ]
        }
      }
    },
    "responses": {
      "NotFoundError": {
        "description": "Error: Not found.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "UnauthorizedError": {
        "description": "Error: Unauthorized request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "KeyAuth": {
        "type": "apiKey",
        "in": "query",
        "name": "access_token"
      },
      "Auth": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization"
      }
    }
  }
}